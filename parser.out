Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DIVIDE
    MINUS
    TIMES

Grammar

Rule 0     S' -> statements_list
Rule 1     number -> INT
Rule 2     number -> FLOAT
Rule 3     expression -> ID
Rule 4     expression -> number
Rule 5     expression -> STRING
Rule 6     inner_vector -> expression , expression
Rule 7     inner_vector -> inner_vector , expression
Rule 8     vector -> [ expression ]
Rule 9     vector -> [ inner_vector ]
Rule 10    inner_matrix -> vector
Rule 11    inner_matrix -> inner_matrix , vector
Rule 12    matrix -> [ inner_matrix ]
Rule 13    expression -> expression PLUS expression
Rule 14    expression -> expression EQ expression
Rule 15    statement -> ID ASSIGN expression ;
Rule 16    statement -> ID MINUS_ASSIGN expression ;
Rule 17    statement -> ID PLUS_ASSIGN expression ;
Rule 18    statement -> ID TIMES_ASSIGN expression ;
Rule 19    statement -> ID DIVIDE_ASSIGN expression ;
Rule 20    code_block -> { statements_list }
Rule 21    code_block -> { statement }
Rule 22    statements_list -> statements_list statement
Rule 23    statements_list -> statement statement
Rule 24    statement -> IF ( expression ) statement
Rule 25    statement -> IF ( expression ) code_block
Rule 26    statement -> IF ( expression ) statement else_block
Rule 27    statement -> IF ( expression ) code_block else_block
Rule 28    else_block -> ELSE statement
Rule 29    else_block -> ELSE code_block

Terminals, with rules where they appear

(                    : 24 25 26 27
)                    : 24 25 26 27
,                    : 6 7 11
;                    : 15 16 17 18 19
ASSIGN               : 15
DIVIDE               : 
DIVIDE_ASSIGN        : 19
ELSE                 : 28 29
EQ                   : 14
FLOAT                : 2
ID                   : 3 15 16 17 18 19
IF                   : 24 25 26 27
INT                  : 1
MINUS                : 
MINUS_ASSIGN         : 16
PLUS                 : 13
PLUS_ASSIGN          : 17
STRING               : 5
TIMES                : 
TIMES_ASSIGN         : 18
[                    : 8 9 12
]                    : 8 9 12
error                : 
{                    : 20 21
}                    : 20 21

Nonterminals, with rules where they appear

code_block           : 25 27 29
else_block           : 26 27
expression           : 6 6 7 8 13 13 14 14 15 16 17 18 19 24 25 26 27
inner_matrix         : 11 12
inner_vector         : 7 9
matrix               : 
number               : 4
statement            : 21 22 23 23 24 26 28
statements_list      : 20 22 0
vector               : 10 11

Parsing method: LALR

state 0

    (0) S' -> . statements_list
    (22) statements_list -> . statements_list statement
    (23) statements_list -> . statement statement
    (15) statement -> . ID ASSIGN expression ;
    (16) statement -> . ID MINUS_ASSIGN expression ;
    (17) statement -> . ID PLUS_ASSIGN expression ;
    (18) statement -> . ID TIMES_ASSIGN expression ;
    (19) statement -> . ID DIVIDE_ASSIGN expression ;
    (24) statement -> . IF ( expression ) statement
    (25) statement -> . IF ( expression ) code_block
    (26) statement -> . IF ( expression ) statement else_block
    (27) statement -> . IF ( expression ) code_block else_block

    ID              shift and go to state 3
    IF              shift and go to state 4

    statements_list                shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> statements_list .
    (22) statements_list -> statements_list . statement
    (15) statement -> . ID ASSIGN expression ;
    (16) statement -> . ID MINUS_ASSIGN expression ;
    (17) statement -> . ID PLUS_ASSIGN expression ;
    (18) statement -> . ID TIMES_ASSIGN expression ;
    (19) statement -> . ID DIVIDE_ASSIGN expression ;
    (24) statement -> . IF ( expression ) statement
    (25) statement -> . IF ( expression ) code_block
    (26) statement -> . IF ( expression ) statement else_block
    (27) statement -> . IF ( expression ) code_block else_block

    ID              shift and go to state 3
    IF              shift and go to state 4

    statement                      shift and go to state 5

state 2

    (23) statements_list -> statement . statement
    (15) statement -> . ID ASSIGN expression ;
    (16) statement -> . ID MINUS_ASSIGN expression ;
    (17) statement -> . ID PLUS_ASSIGN expression ;
    (18) statement -> . ID TIMES_ASSIGN expression ;
    (19) statement -> . ID DIVIDE_ASSIGN expression ;
    (24) statement -> . IF ( expression ) statement
    (25) statement -> . IF ( expression ) code_block
    (26) statement -> . IF ( expression ) statement else_block
    (27) statement -> . IF ( expression ) code_block else_block

    ID              shift and go to state 3
    IF              shift and go to state 4

    statement                      shift and go to state 6

state 3

    (15) statement -> ID . ASSIGN expression ;
    (16) statement -> ID . MINUS_ASSIGN expression ;
    (17) statement -> ID . PLUS_ASSIGN expression ;
    (18) statement -> ID . TIMES_ASSIGN expression ;
    (19) statement -> ID . DIVIDE_ASSIGN expression ;

    ASSIGN          shift and go to state 7
    MINUS_ASSIGN    shift and go to state 8
    PLUS_ASSIGN     shift and go to state 9
    TIMES_ASSIGN    shift and go to state 10
    DIVIDE_ASSIGN   shift and go to state 11


state 4

    (24) statement -> IF . ( expression ) statement
    (25) statement -> IF . ( expression ) code_block
    (26) statement -> IF . ( expression ) statement else_block
    (27) statement -> IF . ( expression ) code_block else_block

    (               shift and go to state 12


state 5

    (22) statements_list -> statements_list statement .

    ID              reduce using rule 22 (statements_list -> statements_list statement .)
    IF              reduce using rule 22 (statements_list -> statements_list statement .)
    $end            reduce using rule 22 (statements_list -> statements_list statement .)
    }               reduce using rule 22 (statements_list -> statements_list statement .)


state 6

    (23) statements_list -> statement statement .

    ID              reduce using rule 23 (statements_list -> statement statement .)
    IF              reduce using rule 23 (statements_list -> statement statement .)
    $end            reduce using rule 23 (statements_list -> statement statement .)
    }               reduce using rule 23 (statements_list -> statement statement .)


state 7

    (15) statement -> ID ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression EQ expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 13
    STRING          shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 14
    number                         shift and go to state 15

state 8

    (16) statement -> ID MINUS_ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression EQ expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 13
    STRING          shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 19
    number                         shift and go to state 15

state 9

    (17) statement -> ID PLUS_ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression EQ expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 13
    STRING          shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 20
    number                         shift and go to state 15

state 10

    (18) statement -> ID TIMES_ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression EQ expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 13
    STRING          shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 21
    number                         shift and go to state 15

state 11

    (19) statement -> ID DIVIDE_ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression EQ expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 13
    STRING          shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 22
    number                         shift and go to state 15

state 12

    (24) statement -> IF ( . expression ) statement
    (25) statement -> IF ( . expression ) code_block
    (26) statement -> IF ( . expression ) statement else_block
    (27) statement -> IF ( . expression ) code_block else_block
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression EQ expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 13
    STRING          shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 23
    number                         shift and go to state 15

state 13

    (3) expression -> ID .

    ;               reduce using rule 3 (expression -> ID .)
    PLUS            reduce using rule 3 (expression -> ID .)
    EQ              reduce using rule 3 (expression -> ID .)
    )               reduce using rule 3 (expression -> ID .)


state 14

    (15) statement -> ID ASSIGN expression . ;
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . EQ expression

    ;               shift and go to state 24
    PLUS            shift and go to state 25
    EQ              shift and go to state 26


state 15

    (4) expression -> number .

    ;               reduce using rule 4 (expression -> number .)
    PLUS            reduce using rule 4 (expression -> number .)
    EQ              reduce using rule 4 (expression -> number .)
    )               reduce using rule 4 (expression -> number .)


state 16

    (5) expression -> STRING .

    ;               reduce using rule 5 (expression -> STRING .)
    PLUS            reduce using rule 5 (expression -> STRING .)
    EQ              reduce using rule 5 (expression -> STRING .)
    )               reduce using rule 5 (expression -> STRING .)


state 17

    (1) number -> INT .

    ;               reduce using rule 1 (number -> INT .)
    PLUS            reduce using rule 1 (number -> INT .)
    EQ              reduce using rule 1 (number -> INT .)
    )               reduce using rule 1 (number -> INT .)


state 18

    (2) number -> FLOAT .

    ;               reduce using rule 2 (number -> FLOAT .)
    PLUS            reduce using rule 2 (number -> FLOAT .)
    EQ              reduce using rule 2 (number -> FLOAT .)
    )               reduce using rule 2 (number -> FLOAT .)


state 19

    (16) statement -> ID MINUS_ASSIGN expression . ;
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . EQ expression

    ;               shift and go to state 27
    PLUS            shift and go to state 25
    EQ              shift and go to state 26


state 20

    (17) statement -> ID PLUS_ASSIGN expression . ;
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . EQ expression

    ;               shift and go to state 28
    PLUS            shift and go to state 25
    EQ              shift and go to state 26


state 21

    (18) statement -> ID TIMES_ASSIGN expression . ;
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . EQ expression

    ;               shift and go to state 29
    PLUS            shift and go to state 25
    EQ              shift and go to state 26


state 22

    (19) statement -> ID DIVIDE_ASSIGN expression . ;
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . EQ expression

    ;               shift and go to state 30
    PLUS            shift and go to state 25
    EQ              shift and go to state 26


state 23

    (24) statement -> IF ( expression . ) statement
    (25) statement -> IF ( expression . ) code_block
    (26) statement -> IF ( expression . ) statement else_block
    (27) statement -> IF ( expression . ) code_block else_block
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . EQ expression

    )               shift and go to state 31
    PLUS            shift and go to state 25
    EQ              shift and go to state 26


state 24

    (15) statement -> ID ASSIGN expression ; .

    ID              reduce using rule 15 (statement -> ID ASSIGN expression ; .)
    IF              reduce using rule 15 (statement -> ID ASSIGN expression ; .)
    $end            reduce using rule 15 (statement -> ID ASSIGN expression ; .)
    ELSE            reduce using rule 15 (statement -> ID ASSIGN expression ; .)
    }               reduce using rule 15 (statement -> ID ASSIGN expression ; .)


state 25

    (13) expression -> expression PLUS . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression EQ expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 13
    STRING          shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 32
    number                         shift and go to state 15

state 26

    (14) expression -> expression EQ . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression EQ expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 13
    STRING          shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 33
    number                         shift and go to state 15

state 27

    (16) statement -> ID MINUS_ASSIGN expression ; .

    ID              reduce using rule 16 (statement -> ID MINUS_ASSIGN expression ; .)
    IF              reduce using rule 16 (statement -> ID MINUS_ASSIGN expression ; .)
    $end            reduce using rule 16 (statement -> ID MINUS_ASSIGN expression ; .)
    ELSE            reduce using rule 16 (statement -> ID MINUS_ASSIGN expression ; .)
    }               reduce using rule 16 (statement -> ID MINUS_ASSIGN expression ; .)


state 28

    (17) statement -> ID PLUS_ASSIGN expression ; .

    ID              reduce using rule 17 (statement -> ID PLUS_ASSIGN expression ; .)
    IF              reduce using rule 17 (statement -> ID PLUS_ASSIGN expression ; .)
    $end            reduce using rule 17 (statement -> ID PLUS_ASSIGN expression ; .)
    ELSE            reduce using rule 17 (statement -> ID PLUS_ASSIGN expression ; .)
    }               reduce using rule 17 (statement -> ID PLUS_ASSIGN expression ; .)


state 29

    (18) statement -> ID TIMES_ASSIGN expression ; .

    ID              reduce using rule 18 (statement -> ID TIMES_ASSIGN expression ; .)
    IF              reduce using rule 18 (statement -> ID TIMES_ASSIGN expression ; .)
    $end            reduce using rule 18 (statement -> ID TIMES_ASSIGN expression ; .)
    ELSE            reduce using rule 18 (statement -> ID TIMES_ASSIGN expression ; .)
    }               reduce using rule 18 (statement -> ID TIMES_ASSIGN expression ; .)


state 30

    (19) statement -> ID DIVIDE_ASSIGN expression ; .

    ID              reduce using rule 19 (statement -> ID DIVIDE_ASSIGN expression ; .)
    IF              reduce using rule 19 (statement -> ID DIVIDE_ASSIGN expression ; .)
    $end            reduce using rule 19 (statement -> ID DIVIDE_ASSIGN expression ; .)
    ELSE            reduce using rule 19 (statement -> ID DIVIDE_ASSIGN expression ; .)
    }               reduce using rule 19 (statement -> ID DIVIDE_ASSIGN expression ; .)


state 31

    (24) statement -> IF ( expression ) . statement
    (25) statement -> IF ( expression ) . code_block
    (26) statement -> IF ( expression ) . statement else_block
    (27) statement -> IF ( expression ) . code_block else_block
    (15) statement -> . ID ASSIGN expression ;
    (16) statement -> . ID MINUS_ASSIGN expression ;
    (17) statement -> . ID PLUS_ASSIGN expression ;
    (18) statement -> . ID TIMES_ASSIGN expression ;
    (19) statement -> . ID DIVIDE_ASSIGN expression ;
    (24) statement -> . IF ( expression ) statement
    (25) statement -> . IF ( expression ) code_block
    (26) statement -> . IF ( expression ) statement else_block
    (27) statement -> . IF ( expression ) code_block else_block
    (20) code_block -> . { statements_list }
    (21) code_block -> . { statement }

    ID              shift and go to state 3
    IF              shift and go to state 4
    {               shift and go to state 36

    statement                      shift and go to state 34
    code_block                     shift and go to state 35

state 32

    (13) expression -> expression PLUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . EQ expression

    ;               reduce using rule 13 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 13 (expression -> expression PLUS expression .)
    EQ              reduce using rule 13 (expression -> expression PLUS expression .)
    )               reduce using rule 13 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 25 ]
  ! EQ              [ shift and go to state 26 ]


state 33

    (14) expression -> expression EQ expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . EQ expression

    ;               reduce using rule 14 (expression -> expression EQ expression .)
    EQ              reduce using rule 14 (expression -> expression EQ expression .)
    )               reduce using rule 14 (expression -> expression EQ expression .)
    PLUS            shift and go to state 25

  ! PLUS            [ reduce using rule 14 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 26 ]


state 34

    (24) statement -> IF ( expression ) statement .
    (26) statement -> IF ( expression ) statement . else_block
    (28) else_block -> . ELSE statement
    (29) else_block -> . ELSE code_block

    ID              reduce using rule 24 (statement -> IF ( expression ) statement .)
    IF              reduce using rule 24 (statement -> IF ( expression ) statement .)
    $end            reduce using rule 24 (statement -> IF ( expression ) statement .)
    }               reduce using rule 24 (statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 38

  ! ELSE            [ reduce using rule 24 (statement -> IF ( expression ) statement .) ]

    else_block                     shift and go to state 37

state 35

    (25) statement -> IF ( expression ) code_block .
    (27) statement -> IF ( expression ) code_block . else_block
    (28) else_block -> . ELSE statement
    (29) else_block -> . ELSE code_block

    ID              reduce using rule 25 (statement -> IF ( expression ) code_block .)
    IF              reduce using rule 25 (statement -> IF ( expression ) code_block .)
    $end            reduce using rule 25 (statement -> IF ( expression ) code_block .)
    }               reduce using rule 25 (statement -> IF ( expression ) code_block .)
    ELSE            shift and go to state 38

  ! ELSE            [ reduce using rule 25 (statement -> IF ( expression ) code_block .) ]

    else_block                     shift and go to state 39

state 36

    (20) code_block -> { . statements_list }
    (21) code_block -> { . statement }
    (22) statements_list -> . statements_list statement
    (23) statements_list -> . statement statement
    (15) statement -> . ID ASSIGN expression ;
    (16) statement -> . ID MINUS_ASSIGN expression ;
    (17) statement -> . ID PLUS_ASSIGN expression ;
    (18) statement -> . ID TIMES_ASSIGN expression ;
    (19) statement -> . ID DIVIDE_ASSIGN expression ;
    (24) statement -> . IF ( expression ) statement
    (25) statement -> . IF ( expression ) code_block
    (26) statement -> . IF ( expression ) statement else_block
    (27) statement -> . IF ( expression ) code_block else_block

    ID              shift and go to state 3
    IF              shift and go to state 4

    statements_list                shift and go to state 40
    statement                      shift and go to state 41

state 37

    (26) statement -> IF ( expression ) statement else_block .

    ID              reduce using rule 26 (statement -> IF ( expression ) statement else_block .)
    IF              reduce using rule 26 (statement -> IF ( expression ) statement else_block .)
    $end            reduce using rule 26 (statement -> IF ( expression ) statement else_block .)
    ELSE            reduce using rule 26 (statement -> IF ( expression ) statement else_block .)
    }               reduce using rule 26 (statement -> IF ( expression ) statement else_block .)


state 38

    (28) else_block -> ELSE . statement
    (29) else_block -> ELSE . code_block
    (15) statement -> . ID ASSIGN expression ;
    (16) statement -> . ID MINUS_ASSIGN expression ;
    (17) statement -> . ID PLUS_ASSIGN expression ;
    (18) statement -> . ID TIMES_ASSIGN expression ;
    (19) statement -> . ID DIVIDE_ASSIGN expression ;
    (24) statement -> . IF ( expression ) statement
    (25) statement -> . IF ( expression ) code_block
    (26) statement -> . IF ( expression ) statement else_block
    (27) statement -> . IF ( expression ) code_block else_block
    (20) code_block -> . { statements_list }
    (21) code_block -> . { statement }

    ID              shift and go to state 3
    IF              shift and go to state 4
    {               shift and go to state 36

    statement                      shift and go to state 42
    code_block                     shift and go to state 43

state 39

    (27) statement -> IF ( expression ) code_block else_block .

    ID              reduce using rule 27 (statement -> IF ( expression ) code_block else_block .)
    IF              reduce using rule 27 (statement -> IF ( expression ) code_block else_block .)
    $end            reduce using rule 27 (statement -> IF ( expression ) code_block else_block .)
    ELSE            reduce using rule 27 (statement -> IF ( expression ) code_block else_block .)
    }               reduce using rule 27 (statement -> IF ( expression ) code_block else_block .)


state 40

    (20) code_block -> { statements_list . }
    (22) statements_list -> statements_list . statement
    (15) statement -> . ID ASSIGN expression ;
    (16) statement -> . ID MINUS_ASSIGN expression ;
    (17) statement -> . ID PLUS_ASSIGN expression ;
    (18) statement -> . ID TIMES_ASSIGN expression ;
    (19) statement -> . ID DIVIDE_ASSIGN expression ;
    (24) statement -> . IF ( expression ) statement
    (25) statement -> . IF ( expression ) code_block
    (26) statement -> . IF ( expression ) statement else_block
    (27) statement -> . IF ( expression ) code_block else_block

    }               shift and go to state 44
    ID              shift and go to state 3
    IF              shift and go to state 4

    statement                      shift and go to state 5

state 41

    (21) code_block -> { statement . }
    (23) statements_list -> statement . statement
    (15) statement -> . ID ASSIGN expression ;
    (16) statement -> . ID MINUS_ASSIGN expression ;
    (17) statement -> . ID PLUS_ASSIGN expression ;
    (18) statement -> . ID TIMES_ASSIGN expression ;
    (19) statement -> . ID DIVIDE_ASSIGN expression ;
    (24) statement -> . IF ( expression ) statement
    (25) statement -> . IF ( expression ) code_block
    (26) statement -> . IF ( expression ) statement else_block
    (27) statement -> . IF ( expression ) code_block else_block

    }               shift and go to state 45
    ID              shift and go to state 3
    IF              shift and go to state 4

    statement                      shift and go to state 6

state 42

    (28) else_block -> ELSE statement .

    ELSE            reduce using rule 28 (else_block -> ELSE statement .)
    ID              reduce using rule 28 (else_block -> ELSE statement .)
    IF              reduce using rule 28 (else_block -> ELSE statement .)
    $end            reduce using rule 28 (else_block -> ELSE statement .)
    }               reduce using rule 28 (else_block -> ELSE statement .)


state 43

    (29) else_block -> ELSE code_block .

    ELSE            reduce using rule 29 (else_block -> ELSE code_block .)
    ID              reduce using rule 29 (else_block -> ELSE code_block .)
    IF              reduce using rule 29 (else_block -> ELSE code_block .)
    $end            reduce using rule 29 (else_block -> ELSE code_block .)
    }               reduce using rule 29 (else_block -> ELSE code_block .)


state 44

    (20) code_block -> { statements_list } .

    ELSE            reduce using rule 20 (code_block -> { statements_list } .)
    ID              reduce using rule 20 (code_block -> { statements_list } .)
    IF              reduce using rule 20 (code_block -> { statements_list } .)
    $end            reduce using rule 20 (code_block -> { statements_list } .)
    }               reduce using rule 20 (code_block -> { statements_list } .)


state 45

    (21) code_block -> { statement } .

    ELSE            reduce using rule 21 (code_block -> { statement } .)
    ID              reduce using rule 21 (code_block -> { statement } .)
    IF              reduce using rule 21 (code_block -> { statement } .)
    $end            reduce using rule 21 (code_block -> { statement } .)
    }               reduce using rule 21 (code_block -> { statement } .)

