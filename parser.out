Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statements_list
Rule 1     number -> INT
Rule 2     number -> FLOAT
Rule 3     expression -> ID
Rule 4     expression -> number
Rule 5     expression -> STRING
Rule 6     inner_table -> expression , expression
Rule 7     inner_table -> inner_table , expression
Rule 8     expression -> [ expression ]
Rule 9     expression -> [ inner_table ]
Rule 10    expression -> ZEROS ( expression )
Rule 11    expression -> EYE ( expression )
Rule 12    expression -> ONES ( expression )
Rule 13    range -> expression : expression
Rule 14    expression -> MINUS expression
Rule 15    expression -> expression PLUS expression
Rule 16    expression -> expression MINUS expression
Rule 17    expression -> expression TIMES expression
Rule 18    expression -> expression DIVIDE expression
Rule 19    expression -> expression PLUS_MAT expression
Rule 20    expression -> expression MINUS_MAT expression
Rule 21    expression -> expression TIMES_MAT expression
Rule 22    expression -> expression DIVIDE_MAT expression
Rule 23    expression -> expression TRANSPOSE
Rule 24    expression -> expression EQ expression
Rule 25    expression -> expression NE expression
Rule 26    expression -> expression GT expression
Rule 27    expression -> expression GE expression
Rule 28    expression -> expression LT expression
Rule 29    expression -> expression LE expression
Rule 30    statement -> ID ASSIGN expression ;
Rule 31    statement -> ID MINUS_ASSIGN expression ;
Rule 32    statement -> ID PLUS_ASSIGN expression ;
Rule 33    statement -> ID TIMES_ASSIGN expression ;
Rule 34    statement -> ID DIVIDE_ASSIGN expression ;
Rule 35    slice -> ID [ expression ]
Rule 36    slice -> ID [ range ]
Rule 37    slice -> ID [ expression , expression ]
Rule 38    slice -> ID [ expression , range ]
Rule 39    slice -> ID [ range , expression ]
Rule 40    slice -> ID [ range , range ]
Rule 41    statement -> slice ASSIGN expression ;
Rule 42    statement -> slice MINUS_ASSIGN expression ;
Rule 43    statement -> slice PLUS_ASSIGN expression ;
Rule 44    statement -> slice TIMES_ASSIGN expression ;
Rule 45    statement -> slice DIVIDE_ASSIGN expression ;
Rule 46    statements_list -> statements_list statement
Rule 47    statements_list -> statements_list code_block
Rule 48    statements_list -> statement statement
Rule 49    statements_list -> statement code_block
Rule 50    statement -> RETURN ;
Rule 51    statement -> RETURN expression ;
Rule 52    code_block -> { statements_list }
Rule 53    code_block -> { statement }
Rule 54    loop_statement -> BREAK ;
Rule 55    loop_statement -> CONTINUE ;
Rule 56    loop_block -> { loop_statements_list }
Rule 57    loop_block -> { loop_statement }
Rule 58    loop_statements_list -> loop_statements_list statement
Rule 59    loop_statements_list -> statements_list loop_statement
Rule 60    loop_statements_list -> loop_statement statement
Rule 61    loop_statements_list -> statement loop_statement
Rule 62    statement -> FOR ID ASSIGN range code_block
Rule 63    statement -> FOR ID ASSIGN range loop_block
Rule 64    statement -> FOR ID ASSIGN range statement
Rule 65    statement -> FOR ID ASSIGN range loop_statement
Rule 66    statement -> WHILE ( expression ) code_block
Rule 67    statement -> WHILE ( expression ) loop_block
Rule 68    statement -> WHILE ( expression ) statement
Rule 69    statement -> WHILE ( expression ) loop_statement
Rule 70    statement -> IF ( expression ) statement
Rule 71    statement -> IF ( expression ) code_block
Rule 72    statement -> IF ( expression ) statement else_block
Rule 73    statement -> IF ( expression ) code_block else_block
Rule 74    else_block -> ELSE statement
Rule 75    else_block -> ELSE code_block
Rule 76    loop_statement -> IF ( expression ) loop_statement
Rule 77    loop_statement -> IF ( expression ) loop_block
Rule 78    loop_statement -> IF ( expression ) loop_statement loop_else_block
Rule 79    loop_statement -> IF ( expression ) statement loop_else_block
Rule 80    loop_statement -> IF ( expression ) loop_statement else_block
Rule 81    loop_statement -> IF ( expression ) loop_block loop_else_block
Rule 82    loop_statement -> IF ( expression ) code_block loop_else_block
Rule 83    loop_statement -> IF ( expression ) loop_block else_block
Rule 84    loop_else_block -> ELSE loop_statement
Rule 85    loop_else_block -> ELSE loop_block
Rule 86    statement -> PRINT inner_table ;
Rule 87    statement -> PRINT expression ;

Terminals, with rules where they appear

(                    : 10 11 12 66 67 68 69 70 71 72 73 76 77 78 79 80 81 82 83
)                    : 10 11 12 66 67 68 69 70 71 72 73 76 77 78 79 80 81 82 83
,                    : 6 7 37 38 39 40
:                    : 13
;                    : 30 31 32 33 34 41 42 43 44 45 50 51 54 55 86 87
ASSIGN               : 30 41 62 63 64 65
BREAK                : 54
CONTINUE             : 55
DIVIDE               : 18
DIVIDE_ASSIGN        : 34 45
DIVIDE_MAT           : 22
ELSE                 : 74 75 84 85
EQ                   : 24
EYE                  : 11
FLOAT                : 2
FOR                  : 62 63 64 65
GE                   : 27
GT                   : 26
ID                   : 3 30 31 32 33 34 35 36 37 38 39 40 62 63 64 65
IF                   : 70 71 72 73 76 77 78 79 80 81 82 83
INT                  : 1
LE                   : 29
LT                   : 28
MINUS                : 14 16
MINUS_ASSIGN         : 31 42
MINUS_MAT            : 20
NE                   : 25
ONES                 : 12
PLUS                 : 15
PLUS_ASSIGN          : 32 43
PLUS_MAT             : 19
PRINT                : 86 87
RETURN               : 50 51
STRING               : 5
TIMES                : 17
TIMES_ASSIGN         : 33 44
TIMES_MAT            : 21
TRANSPOSE            : 23
WHILE                : 66 67 68 69
ZEROS                : 10
[                    : 8 9 35 36 37 38 39 40
]                    : 8 9 35 36 37 38 39 40
error                : 
{                    : 52 53 56 57
}                    : 52 53 56 57

Nonterminals, with rules where they appear

code_block           : 47 49 62 66 71 73 75 82
else_block           : 72 73 80 83
expression           : 6 6 7 8 10 11 12 13 13 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 24 24 25 25 26 26 27 27 28 28 29 29 30 31 32 33 34 35 37 37 38 39 41 42 43 44 45 51 66 67 68 69 70 71 72 73 76 77 78 79 80 81 82 83 87
inner_table          : 7 9 86
loop_block           : 63 67 77 81 83 85
loop_else_block      : 78 79 81 82
loop_statement       : 57 59 60 61 65 69 76 78 80 84
loop_statements_list : 56 58
number               : 4
range                : 36 38 39 40 40 62 63 64 65
slice                : 41 42 43 44 45
statement            : 46 48 48 49 53 58 60 61 64 68 70 72 74 79
statements_list      : 46 47 52 59 0

Parsing method: LALR

state 0

    (0) S' -> . statements_list
    (46) statements_list -> . statements_list statement
    (47) statements_list -> . statements_list code_block
    (48) statements_list -> . statement statement
    (49) statements_list -> . statement code_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    PRINT           shift and go to state 9

    statements_list                shift and go to state 1
    statement                      shift and go to state 2
    slice                          shift and go to state 4

state 1

    (0) S' -> statements_list .
    (46) statements_list -> statements_list . statement
    (47) statements_list -> statements_list . code_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    PRINT           shift and go to state 9
    {               shift and go to state 12

    statement                      shift and go to state 10
    code_block                     shift and go to state 11
    slice                          shift and go to state 4

state 2

    (48) statements_list -> statement . statement
    (49) statements_list -> statement . code_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    PRINT           shift and go to state 9
    {               shift and go to state 12

    statement                      shift and go to state 13
    code_block                     shift and go to state 14
    slice                          shift and go to state 4

state 3

    (30) statement -> ID . ASSIGN expression ;
    (31) statement -> ID . MINUS_ASSIGN expression ;
    (32) statement -> ID . PLUS_ASSIGN expression ;
    (33) statement -> ID . TIMES_ASSIGN expression ;
    (34) statement -> ID . DIVIDE_ASSIGN expression ;
    (35) slice -> ID . [ expression ]
    (36) slice -> ID . [ range ]
    (37) slice -> ID . [ expression , expression ]
    (38) slice -> ID . [ expression , range ]
    (39) slice -> ID . [ range , expression ]
    (40) slice -> ID . [ range , range ]

    ASSIGN          shift and go to state 15
    MINUS_ASSIGN    shift and go to state 16
    PLUS_ASSIGN     shift and go to state 17
    TIMES_ASSIGN    shift and go to state 18
    DIVIDE_ASSIGN   shift and go to state 19
    [               shift and go to state 20


state 4

    (41) statement -> slice . ASSIGN expression ;
    (42) statement -> slice . MINUS_ASSIGN expression ;
    (43) statement -> slice . PLUS_ASSIGN expression ;
    (44) statement -> slice . TIMES_ASSIGN expression ;
    (45) statement -> slice . DIVIDE_ASSIGN expression ;

    ASSIGN          shift and go to state 21
    MINUS_ASSIGN    shift and go to state 22
    PLUS_ASSIGN     shift and go to state 23
    TIMES_ASSIGN    shift and go to state 24
    DIVIDE_ASSIGN   shift and go to state 25


state 5

    (50) statement -> RETURN . ;
    (51) statement -> RETURN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ;               shift and go to state 26
    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 27
    number                         shift and go to state 29

state 6

    (62) statement -> FOR . ID ASSIGN range code_block
    (63) statement -> FOR . ID ASSIGN range loop_block
    (64) statement -> FOR . ID ASSIGN range statement
    (65) statement -> FOR . ID ASSIGN range loop_statement

    ID              shift and go to state 38


state 7

    (66) statement -> WHILE . ( expression ) code_block
    (67) statement -> WHILE . ( expression ) loop_block
    (68) statement -> WHILE . ( expression ) statement
    (69) statement -> WHILE . ( expression ) loop_statement

    (               shift and go to state 39


state 8

    (70) statement -> IF . ( expression ) statement
    (71) statement -> IF . ( expression ) code_block
    (72) statement -> IF . ( expression ) statement else_block
    (73) statement -> IF . ( expression ) code_block else_block

    (               shift and go to state 40


state 9

    (86) statement -> PRINT . inner_table ;
    (87) statement -> PRINT . expression ;
    (6) inner_table -> . expression , expression
    (7) inner_table -> . inner_table , expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    inner_table                    shift and go to state 41
    expression                     shift and go to state 42
    number                         shift and go to state 29

state 10

    (46) statements_list -> statements_list statement .

    ID              reduce using rule 46 (statements_list -> statements_list statement .)
    RETURN          reduce using rule 46 (statements_list -> statements_list statement .)
    FOR             reduce using rule 46 (statements_list -> statements_list statement .)
    WHILE           reduce using rule 46 (statements_list -> statements_list statement .)
    IF              reduce using rule 46 (statements_list -> statements_list statement .)
    PRINT           reduce using rule 46 (statements_list -> statements_list statement .)
    {               reduce using rule 46 (statements_list -> statements_list statement .)
    $end            reduce using rule 46 (statements_list -> statements_list statement .)
    }               reduce using rule 46 (statements_list -> statements_list statement .)
    BREAK           reduce using rule 46 (statements_list -> statements_list statement .)
    CONTINUE        reduce using rule 46 (statements_list -> statements_list statement .)


state 11

    (47) statements_list -> statements_list code_block .

    ID              reduce using rule 47 (statements_list -> statements_list code_block .)
    RETURN          reduce using rule 47 (statements_list -> statements_list code_block .)
    FOR             reduce using rule 47 (statements_list -> statements_list code_block .)
    WHILE           reduce using rule 47 (statements_list -> statements_list code_block .)
    IF              reduce using rule 47 (statements_list -> statements_list code_block .)
    PRINT           reduce using rule 47 (statements_list -> statements_list code_block .)
    {               reduce using rule 47 (statements_list -> statements_list code_block .)
    $end            reduce using rule 47 (statements_list -> statements_list code_block .)
    }               reduce using rule 47 (statements_list -> statements_list code_block .)
    BREAK           reduce using rule 47 (statements_list -> statements_list code_block .)
    CONTINUE        reduce using rule 47 (statements_list -> statements_list code_block .)


state 12

    (52) code_block -> { . statements_list }
    (53) code_block -> { . statement }
    (46) statements_list -> . statements_list statement
    (47) statements_list -> . statements_list code_block
    (48) statements_list -> . statement statement
    (49) statements_list -> . statement code_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    PRINT           shift and go to state 9

    statements_list                shift and go to state 43
    statement                      shift and go to state 44
    slice                          shift and go to state 4

state 13

    (48) statements_list -> statement statement .

    ID              reduce using rule 48 (statements_list -> statement statement .)
    RETURN          reduce using rule 48 (statements_list -> statement statement .)
    FOR             reduce using rule 48 (statements_list -> statement statement .)
    WHILE           reduce using rule 48 (statements_list -> statement statement .)
    IF              reduce using rule 48 (statements_list -> statement statement .)
    PRINT           reduce using rule 48 (statements_list -> statement statement .)
    {               reduce using rule 48 (statements_list -> statement statement .)
    $end            reduce using rule 48 (statements_list -> statement statement .)
    }               reduce using rule 48 (statements_list -> statement statement .)
    BREAK           reduce using rule 48 (statements_list -> statement statement .)
    CONTINUE        reduce using rule 48 (statements_list -> statement statement .)


state 14

    (49) statements_list -> statement code_block .

    ID              reduce using rule 49 (statements_list -> statement code_block .)
    RETURN          reduce using rule 49 (statements_list -> statement code_block .)
    FOR             reduce using rule 49 (statements_list -> statement code_block .)
    WHILE           reduce using rule 49 (statements_list -> statement code_block .)
    IF              reduce using rule 49 (statements_list -> statement code_block .)
    PRINT           reduce using rule 49 (statements_list -> statement code_block .)
    {               reduce using rule 49 (statements_list -> statement code_block .)
    $end            reduce using rule 49 (statements_list -> statement code_block .)
    }               reduce using rule 49 (statements_list -> statement code_block .)
    BREAK           reduce using rule 49 (statements_list -> statement code_block .)
    CONTINUE        reduce using rule 49 (statements_list -> statement code_block .)


state 15

    (30) statement -> ID ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 45
    number                         shift and go to state 29

state 16

    (31) statement -> ID MINUS_ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 46
    number                         shift and go to state 29

state 17

    (32) statement -> ID PLUS_ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 47
    number                         shift and go to state 29

state 18

    (33) statement -> ID TIMES_ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 48
    number                         shift and go to state 29

state 19

    (34) statement -> ID DIVIDE_ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 49
    number                         shift and go to state 29

state 20

    (35) slice -> ID [ . expression ]
    (36) slice -> ID [ . range ]
    (37) slice -> ID [ . expression , expression ]
    (38) slice -> ID [ . expression , range ]
    (39) slice -> ID [ . range , expression ]
    (40) slice -> ID [ . range , range ]
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (13) range -> . expression : expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 50
    range                          shift and go to state 51
    number                         shift and go to state 29

state 21

    (41) statement -> slice ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 52
    number                         shift and go to state 29

state 22

    (42) statement -> slice MINUS_ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 53
    number                         shift and go to state 29

state 23

    (43) statement -> slice PLUS_ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 54
    number                         shift and go to state 29

state 24

    (44) statement -> slice TIMES_ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 55
    number                         shift and go to state 29

state 25

    (45) statement -> slice DIVIDE_ASSIGN . expression ;
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 56
    number                         shift and go to state 29

state 26

    (50) statement -> RETURN ; .

    ID              reduce using rule 50 (statement -> RETURN ; .)
    RETURN          reduce using rule 50 (statement -> RETURN ; .)
    FOR             reduce using rule 50 (statement -> RETURN ; .)
    WHILE           reduce using rule 50 (statement -> RETURN ; .)
    IF              reduce using rule 50 (statement -> RETURN ; .)
    PRINT           reduce using rule 50 (statement -> RETURN ; .)
    {               reduce using rule 50 (statement -> RETURN ; .)
    $end            reduce using rule 50 (statement -> RETURN ; .)
    }               reduce using rule 50 (statement -> RETURN ; .)
    ELSE            reduce using rule 50 (statement -> RETURN ; .)
    BREAK           reduce using rule 50 (statement -> RETURN ; .)
    CONTINUE        reduce using rule 50 (statement -> RETURN ; .)


state 27

    (51) statement -> RETURN expression . ;
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 28

    (3) expression -> ID .

    ;               reduce using rule 3 (expression -> ID .)
    PLUS            reduce using rule 3 (expression -> ID .)
    MINUS           reduce using rule 3 (expression -> ID .)
    TIMES           reduce using rule 3 (expression -> ID .)
    DIVIDE          reduce using rule 3 (expression -> ID .)
    PLUS_MAT        reduce using rule 3 (expression -> ID .)
    MINUS_MAT       reduce using rule 3 (expression -> ID .)
    TIMES_MAT       reduce using rule 3 (expression -> ID .)
    DIVIDE_MAT      reduce using rule 3 (expression -> ID .)
    TRANSPOSE       reduce using rule 3 (expression -> ID .)
    EQ              reduce using rule 3 (expression -> ID .)
    NE              reduce using rule 3 (expression -> ID .)
    GT              reduce using rule 3 (expression -> ID .)
    GE              reduce using rule 3 (expression -> ID .)
    LT              reduce using rule 3 (expression -> ID .)
    LE              reduce using rule 3 (expression -> ID .)
    ,               reduce using rule 3 (expression -> ID .)
    ]               reduce using rule 3 (expression -> ID .)
    :               reduce using rule 3 (expression -> ID .)
    )               reduce using rule 3 (expression -> ID .)
    {               reduce using rule 3 (expression -> ID .)
    ID              reduce using rule 3 (expression -> ID .)
    RETURN          reduce using rule 3 (expression -> ID .)
    FOR             reduce using rule 3 (expression -> ID .)
    WHILE           reduce using rule 3 (expression -> ID .)
    IF              reduce using rule 3 (expression -> ID .)
    PRINT           reduce using rule 3 (expression -> ID .)
    BREAK           reduce using rule 3 (expression -> ID .)
    CONTINUE        reduce using rule 3 (expression -> ID .)


state 29

    (4) expression -> number .

    ;               reduce using rule 4 (expression -> number .)
    PLUS            reduce using rule 4 (expression -> number .)
    MINUS           reduce using rule 4 (expression -> number .)
    TIMES           reduce using rule 4 (expression -> number .)
    DIVIDE          reduce using rule 4 (expression -> number .)
    PLUS_MAT        reduce using rule 4 (expression -> number .)
    MINUS_MAT       reduce using rule 4 (expression -> number .)
    TIMES_MAT       reduce using rule 4 (expression -> number .)
    DIVIDE_MAT      reduce using rule 4 (expression -> number .)
    TRANSPOSE       reduce using rule 4 (expression -> number .)
    EQ              reduce using rule 4 (expression -> number .)
    NE              reduce using rule 4 (expression -> number .)
    GT              reduce using rule 4 (expression -> number .)
    GE              reduce using rule 4 (expression -> number .)
    LT              reduce using rule 4 (expression -> number .)
    LE              reduce using rule 4 (expression -> number .)
    ,               reduce using rule 4 (expression -> number .)
    ]               reduce using rule 4 (expression -> number .)
    :               reduce using rule 4 (expression -> number .)
    )               reduce using rule 4 (expression -> number .)
    {               reduce using rule 4 (expression -> number .)
    ID              reduce using rule 4 (expression -> number .)
    RETURN          reduce using rule 4 (expression -> number .)
    FOR             reduce using rule 4 (expression -> number .)
    WHILE           reduce using rule 4 (expression -> number .)
    IF              reduce using rule 4 (expression -> number .)
    PRINT           reduce using rule 4 (expression -> number .)
    BREAK           reduce using rule 4 (expression -> number .)
    CONTINUE        reduce using rule 4 (expression -> number .)


state 30

    (5) expression -> STRING .

    ;               reduce using rule 5 (expression -> STRING .)
    PLUS            reduce using rule 5 (expression -> STRING .)
    MINUS           reduce using rule 5 (expression -> STRING .)
    TIMES           reduce using rule 5 (expression -> STRING .)
    DIVIDE          reduce using rule 5 (expression -> STRING .)
    PLUS_MAT        reduce using rule 5 (expression -> STRING .)
    MINUS_MAT       reduce using rule 5 (expression -> STRING .)
    TIMES_MAT       reduce using rule 5 (expression -> STRING .)
    DIVIDE_MAT      reduce using rule 5 (expression -> STRING .)
    TRANSPOSE       reduce using rule 5 (expression -> STRING .)
    EQ              reduce using rule 5 (expression -> STRING .)
    NE              reduce using rule 5 (expression -> STRING .)
    GT              reduce using rule 5 (expression -> STRING .)
    GE              reduce using rule 5 (expression -> STRING .)
    LT              reduce using rule 5 (expression -> STRING .)
    LE              reduce using rule 5 (expression -> STRING .)
    ,               reduce using rule 5 (expression -> STRING .)
    ]               reduce using rule 5 (expression -> STRING .)
    :               reduce using rule 5 (expression -> STRING .)
    )               reduce using rule 5 (expression -> STRING .)
    {               reduce using rule 5 (expression -> STRING .)
    ID              reduce using rule 5 (expression -> STRING .)
    RETURN          reduce using rule 5 (expression -> STRING .)
    FOR             reduce using rule 5 (expression -> STRING .)
    WHILE           reduce using rule 5 (expression -> STRING .)
    IF              reduce using rule 5 (expression -> STRING .)
    PRINT           reduce using rule 5 (expression -> STRING .)
    BREAK           reduce using rule 5 (expression -> STRING .)
    CONTINUE        reduce using rule 5 (expression -> STRING .)


state 31

    (8) expression -> [ . expression ]
    (9) expression -> [ . inner_table ]
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (6) inner_table -> . expression , expression
    (7) inner_table -> . inner_table , expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 73
    inner_table                    shift and go to state 74
    number                         shift and go to state 29

state 32

    (10) expression -> ZEROS . ( expression )

    (               shift and go to state 75


state 33

    (11) expression -> EYE . ( expression )

    (               shift and go to state 76


state 34

    (12) expression -> ONES . ( expression )

    (               shift and go to state 77


state 35

    (14) expression -> MINUS . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 78
    number                         shift and go to state 29

state 36

    (1) number -> INT .

    ;               reduce using rule 1 (number -> INT .)
    PLUS            reduce using rule 1 (number -> INT .)
    MINUS           reduce using rule 1 (number -> INT .)
    TIMES           reduce using rule 1 (number -> INT .)
    DIVIDE          reduce using rule 1 (number -> INT .)
    PLUS_MAT        reduce using rule 1 (number -> INT .)
    MINUS_MAT       reduce using rule 1 (number -> INT .)
    TIMES_MAT       reduce using rule 1 (number -> INT .)
    DIVIDE_MAT      reduce using rule 1 (number -> INT .)
    TRANSPOSE       reduce using rule 1 (number -> INT .)
    EQ              reduce using rule 1 (number -> INT .)
    NE              reduce using rule 1 (number -> INT .)
    GT              reduce using rule 1 (number -> INT .)
    GE              reduce using rule 1 (number -> INT .)
    LT              reduce using rule 1 (number -> INT .)
    LE              reduce using rule 1 (number -> INT .)
    ,               reduce using rule 1 (number -> INT .)
    ]               reduce using rule 1 (number -> INT .)
    :               reduce using rule 1 (number -> INT .)
    )               reduce using rule 1 (number -> INT .)
    {               reduce using rule 1 (number -> INT .)
    ID              reduce using rule 1 (number -> INT .)
    RETURN          reduce using rule 1 (number -> INT .)
    FOR             reduce using rule 1 (number -> INT .)
    WHILE           reduce using rule 1 (number -> INT .)
    IF              reduce using rule 1 (number -> INT .)
    PRINT           reduce using rule 1 (number -> INT .)
    BREAK           reduce using rule 1 (number -> INT .)
    CONTINUE        reduce using rule 1 (number -> INT .)


state 37

    (2) number -> FLOAT .

    ;               reduce using rule 2 (number -> FLOAT .)
    PLUS            reduce using rule 2 (number -> FLOAT .)
    MINUS           reduce using rule 2 (number -> FLOAT .)
    TIMES           reduce using rule 2 (number -> FLOAT .)
    DIVIDE          reduce using rule 2 (number -> FLOAT .)
    PLUS_MAT        reduce using rule 2 (number -> FLOAT .)
    MINUS_MAT       reduce using rule 2 (number -> FLOAT .)
    TIMES_MAT       reduce using rule 2 (number -> FLOAT .)
    DIVIDE_MAT      reduce using rule 2 (number -> FLOAT .)
    TRANSPOSE       reduce using rule 2 (number -> FLOAT .)
    EQ              reduce using rule 2 (number -> FLOAT .)
    NE              reduce using rule 2 (number -> FLOAT .)
    GT              reduce using rule 2 (number -> FLOAT .)
    GE              reduce using rule 2 (number -> FLOAT .)
    LT              reduce using rule 2 (number -> FLOAT .)
    LE              reduce using rule 2 (number -> FLOAT .)
    ,               reduce using rule 2 (number -> FLOAT .)
    ]               reduce using rule 2 (number -> FLOAT .)
    :               reduce using rule 2 (number -> FLOAT .)
    )               reduce using rule 2 (number -> FLOAT .)
    {               reduce using rule 2 (number -> FLOAT .)
    ID              reduce using rule 2 (number -> FLOAT .)
    RETURN          reduce using rule 2 (number -> FLOAT .)
    FOR             reduce using rule 2 (number -> FLOAT .)
    WHILE           reduce using rule 2 (number -> FLOAT .)
    IF              reduce using rule 2 (number -> FLOAT .)
    PRINT           reduce using rule 2 (number -> FLOAT .)
    BREAK           reduce using rule 2 (number -> FLOAT .)
    CONTINUE        reduce using rule 2 (number -> FLOAT .)


state 38

    (62) statement -> FOR ID . ASSIGN range code_block
    (63) statement -> FOR ID . ASSIGN range loop_block
    (64) statement -> FOR ID . ASSIGN range statement
    (65) statement -> FOR ID . ASSIGN range loop_statement

    ASSIGN          shift and go to state 79


state 39

    (66) statement -> WHILE ( . expression ) code_block
    (67) statement -> WHILE ( . expression ) loop_block
    (68) statement -> WHILE ( . expression ) statement
    (69) statement -> WHILE ( . expression ) loop_statement
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 80
    number                         shift and go to state 29

state 40

    (70) statement -> IF ( . expression ) statement
    (71) statement -> IF ( . expression ) code_block
    (72) statement -> IF ( . expression ) statement else_block
    (73) statement -> IF ( . expression ) code_block else_block
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 81
    number                         shift and go to state 29

state 41

    (86) statement -> PRINT inner_table . ;
    (7) inner_table -> inner_table . , expression

    ;               shift and go to state 82
    ,               shift and go to state 83


state 42

    (87) statement -> PRINT expression . ;
    (6) inner_table -> expression . , expression
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               shift and go to state 84
    ,               shift and go to state 85
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 43

    (52) code_block -> { statements_list . }
    (46) statements_list -> statements_list . statement
    (47) statements_list -> statements_list . code_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    }               shift and go to state 86
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    PRINT           shift and go to state 9
    {               shift and go to state 12

    statement                      shift and go to state 10
    code_block                     shift and go to state 11
    slice                          shift and go to state 4

state 44

    (53) code_block -> { statement . }
    (48) statements_list -> statement . statement
    (49) statements_list -> statement . code_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    }               shift and go to state 87
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    PRINT           shift and go to state 9
    {               shift and go to state 12

    statement                      shift and go to state 13
    code_block                     shift and go to state 14
    slice                          shift and go to state 4

state 45

    (30) statement -> ID ASSIGN expression . ;
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               shift and go to state 88
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 46

    (31) statement -> ID MINUS_ASSIGN expression . ;
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               shift and go to state 89
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 47

    (32) statement -> ID PLUS_ASSIGN expression . ;
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               shift and go to state 90
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 48

    (33) statement -> ID TIMES_ASSIGN expression . ;
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               shift and go to state 91
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 49

    (34) statement -> ID DIVIDE_ASSIGN expression . ;
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               shift and go to state 92
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 50

    (35) slice -> ID [ expression . ]
    (37) slice -> ID [ expression . , expression ]
    (38) slice -> ID [ expression . , range ]
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression
    (13) range -> expression . : expression

    ]               shift and go to state 93
    ,               shift and go to state 94
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72
    :               shift and go to state 95


state 51

    (36) slice -> ID [ range . ]
    (39) slice -> ID [ range . , expression ]
    (40) slice -> ID [ range . , range ]

    ]               shift and go to state 96
    ,               shift and go to state 97


state 52

    (41) statement -> slice ASSIGN expression . ;
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               shift and go to state 98
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 53

    (42) statement -> slice MINUS_ASSIGN expression . ;
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               shift and go to state 99
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 54

    (43) statement -> slice PLUS_ASSIGN expression . ;
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               shift and go to state 100
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 55

    (44) statement -> slice TIMES_ASSIGN expression . ;
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               shift and go to state 101
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 56

    (45) statement -> slice DIVIDE_ASSIGN expression . ;
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               shift and go to state 102
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 57

    (51) statement -> RETURN expression ; .

    ID              reduce using rule 51 (statement -> RETURN expression ; .)
    RETURN          reduce using rule 51 (statement -> RETURN expression ; .)
    FOR             reduce using rule 51 (statement -> RETURN expression ; .)
    WHILE           reduce using rule 51 (statement -> RETURN expression ; .)
    IF              reduce using rule 51 (statement -> RETURN expression ; .)
    PRINT           reduce using rule 51 (statement -> RETURN expression ; .)
    {               reduce using rule 51 (statement -> RETURN expression ; .)
    $end            reduce using rule 51 (statement -> RETURN expression ; .)
    }               reduce using rule 51 (statement -> RETURN expression ; .)
    ELSE            reduce using rule 51 (statement -> RETURN expression ; .)
    BREAK           reduce using rule 51 (statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 51 (statement -> RETURN expression ; .)


state 58

    (15) expression -> expression PLUS . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 103
    number                         shift and go to state 29

state 59

    (16) expression -> expression MINUS . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 104
    number                         shift and go to state 29

state 60

    (17) expression -> expression TIMES . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 105
    number                         shift and go to state 29

state 61

    (18) expression -> expression DIVIDE . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 106
    number                         shift and go to state 29

state 62

    (19) expression -> expression PLUS_MAT . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 107
    number                         shift and go to state 29

state 63

    (20) expression -> expression MINUS_MAT . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 108
    number                         shift and go to state 29

state 64

    (21) expression -> expression TIMES_MAT . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 109
    number                         shift and go to state 29

state 65

    (22) expression -> expression DIVIDE_MAT . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 110
    number                         shift and go to state 29

state 66

    (23) expression -> expression TRANSPOSE .

    ;               reduce using rule 23 (expression -> expression TRANSPOSE .)
    PLUS            reduce using rule 23 (expression -> expression TRANSPOSE .)
    MINUS           reduce using rule 23 (expression -> expression TRANSPOSE .)
    TIMES           reduce using rule 23 (expression -> expression TRANSPOSE .)
    DIVIDE          reduce using rule 23 (expression -> expression TRANSPOSE .)
    PLUS_MAT        reduce using rule 23 (expression -> expression TRANSPOSE .)
    MINUS_MAT       reduce using rule 23 (expression -> expression TRANSPOSE .)
    TIMES_MAT       reduce using rule 23 (expression -> expression TRANSPOSE .)
    DIVIDE_MAT      reduce using rule 23 (expression -> expression TRANSPOSE .)
    TRANSPOSE       reduce using rule 23 (expression -> expression TRANSPOSE .)
    EQ              reduce using rule 23 (expression -> expression TRANSPOSE .)
    NE              reduce using rule 23 (expression -> expression TRANSPOSE .)
    GT              reduce using rule 23 (expression -> expression TRANSPOSE .)
    GE              reduce using rule 23 (expression -> expression TRANSPOSE .)
    LT              reduce using rule 23 (expression -> expression TRANSPOSE .)
    LE              reduce using rule 23 (expression -> expression TRANSPOSE .)
    ,               reduce using rule 23 (expression -> expression TRANSPOSE .)
    ]               reduce using rule 23 (expression -> expression TRANSPOSE .)
    :               reduce using rule 23 (expression -> expression TRANSPOSE .)
    )               reduce using rule 23 (expression -> expression TRANSPOSE .)
    {               reduce using rule 23 (expression -> expression TRANSPOSE .)
    ID              reduce using rule 23 (expression -> expression TRANSPOSE .)
    RETURN          reduce using rule 23 (expression -> expression TRANSPOSE .)
    FOR             reduce using rule 23 (expression -> expression TRANSPOSE .)
    WHILE           reduce using rule 23 (expression -> expression TRANSPOSE .)
    IF              reduce using rule 23 (expression -> expression TRANSPOSE .)
    PRINT           reduce using rule 23 (expression -> expression TRANSPOSE .)
    BREAK           reduce using rule 23 (expression -> expression TRANSPOSE .)
    CONTINUE        reduce using rule 23 (expression -> expression TRANSPOSE .)


state 67

    (24) expression -> expression EQ . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 111
    number                         shift and go to state 29

state 68

    (25) expression -> expression NE . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 112
    number                         shift and go to state 29

state 69

    (26) expression -> expression GT . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 113
    number                         shift and go to state 29

state 70

    (27) expression -> expression GE . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 114
    number                         shift and go to state 29

state 71

    (28) expression -> expression LT . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 115
    number                         shift and go to state 29

state 72

    (29) expression -> expression LE . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 116
    number                         shift and go to state 29

state 73

    (8) expression -> [ expression . ]
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression
    (6) inner_table -> expression . , expression

    ]               shift and go to state 117
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72
    ,               shift and go to state 85


state 74

    (9) expression -> [ inner_table . ]
    (7) inner_table -> inner_table . , expression

    ]               shift and go to state 118
    ,               shift and go to state 83


state 75

    (10) expression -> ZEROS ( . expression )
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 119
    number                         shift and go to state 29

state 76

    (11) expression -> EYE ( . expression )
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 120
    number                         shift and go to state 29

state 77

    (12) expression -> ONES ( . expression )
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 121
    number                         shift and go to state 29

state 78

    (14) expression -> MINUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 14 (expression -> MINUS expression .)
    PLUS            reduce using rule 14 (expression -> MINUS expression .)
    MINUS           reduce using rule 14 (expression -> MINUS expression .)
    TRANSPOSE       reduce using rule 14 (expression -> MINUS expression .)
    EQ              reduce using rule 14 (expression -> MINUS expression .)
    NE              reduce using rule 14 (expression -> MINUS expression .)
    GT              reduce using rule 14 (expression -> MINUS expression .)
    GE              reduce using rule 14 (expression -> MINUS expression .)
    LT              reduce using rule 14 (expression -> MINUS expression .)
    LE              reduce using rule 14 (expression -> MINUS expression .)
    ,               reduce using rule 14 (expression -> MINUS expression .)
    ]               reduce using rule 14 (expression -> MINUS expression .)
    :               reduce using rule 14 (expression -> MINUS expression .)
    )               reduce using rule 14 (expression -> MINUS expression .)
    {               reduce using rule 14 (expression -> MINUS expression .)
    ID              reduce using rule 14 (expression -> MINUS expression .)
    RETURN          reduce using rule 14 (expression -> MINUS expression .)
    FOR             reduce using rule 14 (expression -> MINUS expression .)
    WHILE           reduce using rule 14 (expression -> MINUS expression .)
    IF              reduce using rule 14 (expression -> MINUS expression .)
    PRINT           reduce using rule 14 (expression -> MINUS expression .)
    BREAK           reduce using rule 14 (expression -> MINUS expression .)
    CONTINUE        reduce using rule 14 (expression -> MINUS expression .)
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! TIMES           [ reduce using rule 14 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 14 (expression -> MINUS expression .) ]
  ! PLUS_MAT        [ reduce using rule 14 (expression -> MINUS expression .) ]
  ! MINUS_MAT       [ reduce using rule 14 (expression -> MINUS expression .) ]
  ! TIMES_MAT       [ reduce using rule 14 (expression -> MINUS expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 14 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 79

    (62) statement -> FOR ID ASSIGN . range code_block
    (63) statement -> FOR ID ASSIGN . range loop_block
    (64) statement -> FOR ID ASSIGN . range statement
    (65) statement -> FOR ID ASSIGN . range loop_statement
    (13) range -> . expression : expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    range                          shift and go to state 122
    expression                     shift and go to state 123
    number                         shift and go to state 29

state 80

    (66) statement -> WHILE ( expression . ) code_block
    (67) statement -> WHILE ( expression . ) loop_block
    (68) statement -> WHILE ( expression . ) statement
    (69) statement -> WHILE ( expression . ) loop_statement
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    )               shift and go to state 124
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 81

    (70) statement -> IF ( expression . ) statement
    (71) statement -> IF ( expression . ) code_block
    (72) statement -> IF ( expression . ) statement else_block
    (73) statement -> IF ( expression . ) code_block else_block
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    )               shift and go to state 125
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 82

    (86) statement -> PRINT inner_table ; .

    ID              reduce using rule 86 (statement -> PRINT inner_table ; .)
    RETURN          reduce using rule 86 (statement -> PRINT inner_table ; .)
    FOR             reduce using rule 86 (statement -> PRINT inner_table ; .)
    WHILE           reduce using rule 86 (statement -> PRINT inner_table ; .)
    IF              reduce using rule 86 (statement -> PRINT inner_table ; .)
    PRINT           reduce using rule 86 (statement -> PRINT inner_table ; .)
    {               reduce using rule 86 (statement -> PRINT inner_table ; .)
    $end            reduce using rule 86 (statement -> PRINT inner_table ; .)
    }               reduce using rule 86 (statement -> PRINT inner_table ; .)
    ELSE            reduce using rule 86 (statement -> PRINT inner_table ; .)
    BREAK           reduce using rule 86 (statement -> PRINT inner_table ; .)
    CONTINUE        reduce using rule 86 (statement -> PRINT inner_table ; .)


state 83

    (7) inner_table -> inner_table , . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 126
    number                         shift and go to state 29

state 84

    (87) statement -> PRINT expression ; .

    ID              reduce using rule 87 (statement -> PRINT expression ; .)
    RETURN          reduce using rule 87 (statement -> PRINT expression ; .)
    FOR             reduce using rule 87 (statement -> PRINT expression ; .)
    WHILE           reduce using rule 87 (statement -> PRINT expression ; .)
    IF              reduce using rule 87 (statement -> PRINT expression ; .)
    PRINT           reduce using rule 87 (statement -> PRINT expression ; .)
    {               reduce using rule 87 (statement -> PRINT expression ; .)
    $end            reduce using rule 87 (statement -> PRINT expression ; .)
    }               reduce using rule 87 (statement -> PRINT expression ; .)
    ELSE            reduce using rule 87 (statement -> PRINT expression ; .)
    BREAK           reduce using rule 87 (statement -> PRINT expression ; .)
    CONTINUE        reduce using rule 87 (statement -> PRINT expression ; .)


state 85

    (6) inner_table -> expression , . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 127
    number                         shift and go to state 29

state 86

    (52) code_block -> { statements_list } .

    ID              reduce using rule 52 (code_block -> { statements_list } .)
    RETURN          reduce using rule 52 (code_block -> { statements_list } .)
    FOR             reduce using rule 52 (code_block -> { statements_list } .)
    WHILE           reduce using rule 52 (code_block -> { statements_list } .)
    IF              reduce using rule 52 (code_block -> { statements_list } .)
    PRINT           reduce using rule 52 (code_block -> { statements_list } .)
    {               reduce using rule 52 (code_block -> { statements_list } .)
    $end            reduce using rule 52 (code_block -> { statements_list } .)
    }               reduce using rule 52 (code_block -> { statements_list } .)
    ELSE            reduce using rule 52 (code_block -> { statements_list } .)
    BREAK           reduce using rule 52 (code_block -> { statements_list } .)
    CONTINUE        reduce using rule 52 (code_block -> { statements_list } .)


state 87

    (53) code_block -> { statement } .

    ID              reduce using rule 53 (code_block -> { statement } .)
    RETURN          reduce using rule 53 (code_block -> { statement } .)
    FOR             reduce using rule 53 (code_block -> { statement } .)
    WHILE           reduce using rule 53 (code_block -> { statement } .)
    IF              reduce using rule 53 (code_block -> { statement } .)
    PRINT           reduce using rule 53 (code_block -> { statement } .)
    {               reduce using rule 53 (code_block -> { statement } .)
    $end            reduce using rule 53 (code_block -> { statement } .)
    }               reduce using rule 53 (code_block -> { statement } .)
    ELSE            reduce using rule 53 (code_block -> { statement } .)
    BREAK           reduce using rule 53 (code_block -> { statement } .)
    CONTINUE        reduce using rule 53 (code_block -> { statement } .)


state 88

    (30) statement -> ID ASSIGN expression ; .

    ID              reduce using rule 30 (statement -> ID ASSIGN expression ; .)
    RETURN          reduce using rule 30 (statement -> ID ASSIGN expression ; .)
    FOR             reduce using rule 30 (statement -> ID ASSIGN expression ; .)
    WHILE           reduce using rule 30 (statement -> ID ASSIGN expression ; .)
    IF              reduce using rule 30 (statement -> ID ASSIGN expression ; .)
    PRINT           reduce using rule 30 (statement -> ID ASSIGN expression ; .)
    {               reduce using rule 30 (statement -> ID ASSIGN expression ; .)
    $end            reduce using rule 30 (statement -> ID ASSIGN expression ; .)
    }               reduce using rule 30 (statement -> ID ASSIGN expression ; .)
    ELSE            reduce using rule 30 (statement -> ID ASSIGN expression ; .)
    BREAK           reduce using rule 30 (statement -> ID ASSIGN expression ; .)
    CONTINUE        reduce using rule 30 (statement -> ID ASSIGN expression ; .)


state 89

    (31) statement -> ID MINUS_ASSIGN expression ; .

    ID              reduce using rule 31 (statement -> ID MINUS_ASSIGN expression ; .)
    RETURN          reduce using rule 31 (statement -> ID MINUS_ASSIGN expression ; .)
    FOR             reduce using rule 31 (statement -> ID MINUS_ASSIGN expression ; .)
    WHILE           reduce using rule 31 (statement -> ID MINUS_ASSIGN expression ; .)
    IF              reduce using rule 31 (statement -> ID MINUS_ASSIGN expression ; .)
    PRINT           reduce using rule 31 (statement -> ID MINUS_ASSIGN expression ; .)
    {               reduce using rule 31 (statement -> ID MINUS_ASSIGN expression ; .)
    $end            reduce using rule 31 (statement -> ID MINUS_ASSIGN expression ; .)
    }               reduce using rule 31 (statement -> ID MINUS_ASSIGN expression ; .)
    ELSE            reduce using rule 31 (statement -> ID MINUS_ASSIGN expression ; .)
    BREAK           reduce using rule 31 (statement -> ID MINUS_ASSIGN expression ; .)
    CONTINUE        reduce using rule 31 (statement -> ID MINUS_ASSIGN expression ; .)


state 90

    (32) statement -> ID PLUS_ASSIGN expression ; .

    ID              reduce using rule 32 (statement -> ID PLUS_ASSIGN expression ; .)
    RETURN          reduce using rule 32 (statement -> ID PLUS_ASSIGN expression ; .)
    FOR             reduce using rule 32 (statement -> ID PLUS_ASSIGN expression ; .)
    WHILE           reduce using rule 32 (statement -> ID PLUS_ASSIGN expression ; .)
    IF              reduce using rule 32 (statement -> ID PLUS_ASSIGN expression ; .)
    PRINT           reduce using rule 32 (statement -> ID PLUS_ASSIGN expression ; .)
    {               reduce using rule 32 (statement -> ID PLUS_ASSIGN expression ; .)
    $end            reduce using rule 32 (statement -> ID PLUS_ASSIGN expression ; .)
    }               reduce using rule 32 (statement -> ID PLUS_ASSIGN expression ; .)
    ELSE            reduce using rule 32 (statement -> ID PLUS_ASSIGN expression ; .)
    BREAK           reduce using rule 32 (statement -> ID PLUS_ASSIGN expression ; .)
    CONTINUE        reduce using rule 32 (statement -> ID PLUS_ASSIGN expression ; .)


state 91

    (33) statement -> ID TIMES_ASSIGN expression ; .

    ID              reduce using rule 33 (statement -> ID TIMES_ASSIGN expression ; .)
    RETURN          reduce using rule 33 (statement -> ID TIMES_ASSIGN expression ; .)
    FOR             reduce using rule 33 (statement -> ID TIMES_ASSIGN expression ; .)
    WHILE           reduce using rule 33 (statement -> ID TIMES_ASSIGN expression ; .)
    IF              reduce using rule 33 (statement -> ID TIMES_ASSIGN expression ; .)
    PRINT           reduce using rule 33 (statement -> ID TIMES_ASSIGN expression ; .)
    {               reduce using rule 33 (statement -> ID TIMES_ASSIGN expression ; .)
    $end            reduce using rule 33 (statement -> ID TIMES_ASSIGN expression ; .)
    }               reduce using rule 33 (statement -> ID TIMES_ASSIGN expression ; .)
    ELSE            reduce using rule 33 (statement -> ID TIMES_ASSIGN expression ; .)
    BREAK           reduce using rule 33 (statement -> ID TIMES_ASSIGN expression ; .)
    CONTINUE        reduce using rule 33 (statement -> ID TIMES_ASSIGN expression ; .)


state 92

    (34) statement -> ID DIVIDE_ASSIGN expression ; .

    ID              reduce using rule 34 (statement -> ID DIVIDE_ASSIGN expression ; .)
    RETURN          reduce using rule 34 (statement -> ID DIVIDE_ASSIGN expression ; .)
    FOR             reduce using rule 34 (statement -> ID DIVIDE_ASSIGN expression ; .)
    WHILE           reduce using rule 34 (statement -> ID DIVIDE_ASSIGN expression ; .)
    IF              reduce using rule 34 (statement -> ID DIVIDE_ASSIGN expression ; .)
    PRINT           reduce using rule 34 (statement -> ID DIVIDE_ASSIGN expression ; .)
    {               reduce using rule 34 (statement -> ID DIVIDE_ASSIGN expression ; .)
    $end            reduce using rule 34 (statement -> ID DIVIDE_ASSIGN expression ; .)
    }               reduce using rule 34 (statement -> ID DIVIDE_ASSIGN expression ; .)
    ELSE            reduce using rule 34 (statement -> ID DIVIDE_ASSIGN expression ; .)
    BREAK           reduce using rule 34 (statement -> ID DIVIDE_ASSIGN expression ; .)
    CONTINUE        reduce using rule 34 (statement -> ID DIVIDE_ASSIGN expression ; .)


state 93

    (35) slice -> ID [ expression ] .

    ASSIGN          reduce using rule 35 (slice -> ID [ expression ] .)
    MINUS_ASSIGN    reduce using rule 35 (slice -> ID [ expression ] .)
    PLUS_ASSIGN     reduce using rule 35 (slice -> ID [ expression ] .)
    TIMES_ASSIGN    reduce using rule 35 (slice -> ID [ expression ] .)
    DIVIDE_ASSIGN   reduce using rule 35 (slice -> ID [ expression ] .)


state 94

    (37) slice -> ID [ expression , . expression ]
    (38) slice -> ID [ expression , . range ]
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (13) range -> . expression : expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 128
    range                          shift and go to state 129
    number                         shift and go to state 29

state 95

    (13) range -> expression : . expression
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 130
    number                         shift and go to state 29

state 96

    (36) slice -> ID [ range ] .

    ASSIGN          reduce using rule 36 (slice -> ID [ range ] .)
    MINUS_ASSIGN    reduce using rule 36 (slice -> ID [ range ] .)
    PLUS_ASSIGN     reduce using rule 36 (slice -> ID [ range ] .)
    TIMES_ASSIGN    reduce using rule 36 (slice -> ID [ range ] .)
    DIVIDE_ASSIGN   reduce using rule 36 (slice -> ID [ range ] .)


state 97

    (39) slice -> ID [ range , . expression ]
    (40) slice -> ID [ range , . range ]
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (13) range -> . expression : expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    range                          shift and go to state 131
    expression                     shift and go to state 132
    number                         shift and go to state 29

state 98

    (41) statement -> slice ASSIGN expression ; .

    ID              reduce using rule 41 (statement -> slice ASSIGN expression ; .)
    RETURN          reduce using rule 41 (statement -> slice ASSIGN expression ; .)
    FOR             reduce using rule 41 (statement -> slice ASSIGN expression ; .)
    WHILE           reduce using rule 41 (statement -> slice ASSIGN expression ; .)
    IF              reduce using rule 41 (statement -> slice ASSIGN expression ; .)
    PRINT           reduce using rule 41 (statement -> slice ASSIGN expression ; .)
    {               reduce using rule 41 (statement -> slice ASSIGN expression ; .)
    $end            reduce using rule 41 (statement -> slice ASSIGN expression ; .)
    }               reduce using rule 41 (statement -> slice ASSIGN expression ; .)
    ELSE            reduce using rule 41 (statement -> slice ASSIGN expression ; .)
    BREAK           reduce using rule 41 (statement -> slice ASSIGN expression ; .)
    CONTINUE        reduce using rule 41 (statement -> slice ASSIGN expression ; .)


state 99

    (42) statement -> slice MINUS_ASSIGN expression ; .

    ID              reduce using rule 42 (statement -> slice MINUS_ASSIGN expression ; .)
    RETURN          reduce using rule 42 (statement -> slice MINUS_ASSIGN expression ; .)
    FOR             reduce using rule 42 (statement -> slice MINUS_ASSIGN expression ; .)
    WHILE           reduce using rule 42 (statement -> slice MINUS_ASSIGN expression ; .)
    IF              reduce using rule 42 (statement -> slice MINUS_ASSIGN expression ; .)
    PRINT           reduce using rule 42 (statement -> slice MINUS_ASSIGN expression ; .)
    {               reduce using rule 42 (statement -> slice MINUS_ASSIGN expression ; .)
    $end            reduce using rule 42 (statement -> slice MINUS_ASSIGN expression ; .)
    }               reduce using rule 42 (statement -> slice MINUS_ASSIGN expression ; .)
    ELSE            reduce using rule 42 (statement -> slice MINUS_ASSIGN expression ; .)
    BREAK           reduce using rule 42 (statement -> slice MINUS_ASSIGN expression ; .)
    CONTINUE        reduce using rule 42 (statement -> slice MINUS_ASSIGN expression ; .)


state 100

    (43) statement -> slice PLUS_ASSIGN expression ; .

    ID              reduce using rule 43 (statement -> slice PLUS_ASSIGN expression ; .)
    RETURN          reduce using rule 43 (statement -> slice PLUS_ASSIGN expression ; .)
    FOR             reduce using rule 43 (statement -> slice PLUS_ASSIGN expression ; .)
    WHILE           reduce using rule 43 (statement -> slice PLUS_ASSIGN expression ; .)
    IF              reduce using rule 43 (statement -> slice PLUS_ASSIGN expression ; .)
    PRINT           reduce using rule 43 (statement -> slice PLUS_ASSIGN expression ; .)
    {               reduce using rule 43 (statement -> slice PLUS_ASSIGN expression ; .)
    $end            reduce using rule 43 (statement -> slice PLUS_ASSIGN expression ; .)
    }               reduce using rule 43 (statement -> slice PLUS_ASSIGN expression ; .)
    ELSE            reduce using rule 43 (statement -> slice PLUS_ASSIGN expression ; .)
    BREAK           reduce using rule 43 (statement -> slice PLUS_ASSIGN expression ; .)
    CONTINUE        reduce using rule 43 (statement -> slice PLUS_ASSIGN expression ; .)


state 101

    (44) statement -> slice TIMES_ASSIGN expression ; .

    ID              reduce using rule 44 (statement -> slice TIMES_ASSIGN expression ; .)
    RETURN          reduce using rule 44 (statement -> slice TIMES_ASSIGN expression ; .)
    FOR             reduce using rule 44 (statement -> slice TIMES_ASSIGN expression ; .)
    WHILE           reduce using rule 44 (statement -> slice TIMES_ASSIGN expression ; .)
    IF              reduce using rule 44 (statement -> slice TIMES_ASSIGN expression ; .)
    PRINT           reduce using rule 44 (statement -> slice TIMES_ASSIGN expression ; .)
    {               reduce using rule 44 (statement -> slice TIMES_ASSIGN expression ; .)
    $end            reduce using rule 44 (statement -> slice TIMES_ASSIGN expression ; .)
    }               reduce using rule 44 (statement -> slice TIMES_ASSIGN expression ; .)
    ELSE            reduce using rule 44 (statement -> slice TIMES_ASSIGN expression ; .)
    BREAK           reduce using rule 44 (statement -> slice TIMES_ASSIGN expression ; .)
    CONTINUE        reduce using rule 44 (statement -> slice TIMES_ASSIGN expression ; .)


state 102

    (45) statement -> slice DIVIDE_ASSIGN expression ; .

    ID              reduce using rule 45 (statement -> slice DIVIDE_ASSIGN expression ; .)
    RETURN          reduce using rule 45 (statement -> slice DIVIDE_ASSIGN expression ; .)
    FOR             reduce using rule 45 (statement -> slice DIVIDE_ASSIGN expression ; .)
    WHILE           reduce using rule 45 (statement -> slice DIVIDE_ASSIGN expression ; .)
    IF              reduce using rule 45 (statement -> slice DIVIDE_ASSIGN expression ; .)
    PRINT           reduce using rule 45 (statement -> slice DIVIDE_ASSIGN expression ; .)
    {               reduce using rule 45 (statement -> slice DIVIDE_ASSIGN expression ; .)
    $end            reduce using rule 45 (statement -> slice DIVIDE_ASSIGN expression ; .)
    }               reduce using rule 45 (statement -> slice DIVIDE_ASSIGN expression ; .)
    ELSE            reduce using rule 45 (statement -> slice DIVIDE_ASSIGN expression ; .)
    BREAK           reduce using rule 45 (statement -> slice DIVIDE_ASSIGN expression ; .)
    CONTINUE        reduce using rule 45 (statement -> slice DIVIDE_ASSIGN expression ; .)


state 103

    (15) expression -> expression PLUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 15 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 15 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 15 (expression -> expression PLUS expression .)
    TRANSPOSE       reduce using rule 15 (expression -> expression PLUS expression .)
    EQ              reduce using rule 15 (expression -> expression PLUS expression .)
    NE              reduce using rule 15 (expression -> expression PLUS expression .)
    GT              reduce using rule 15 (expression -> expression PLUS expression .)
    GE              reduce using rule 15 (expression -> expression PLUS expression .)
    LT              reduce using rule 15 (expression -> expression PLUS expression .)
    LE              reduce using rule 15 (expression -> expression PLUS expression .)
    ,               reduce using rule 15 (expression -> expression PLUS expression .)
    ]               reduce using rule 15 (expression -> expression PLUS expression .)
    :               reduce using rule 15 (expression -> expression PLUS expression .)
    )               reduce using rule 15 (expression -> expression PLUS expression .)
    {               reduce using rule 15 (expression -> expression PLUS expression .)
    ID              reduce using rule 15 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 15 (expression -> expression PLUS expression .)
    FOR             reduce using rule 15 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 15 (expression -> expression PLUS expression .)
    IF              reduce using rule 15 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 15 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 15 (expression -> expression PLUS expression .)
    CONTINUE        reduce using rule 15 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! TIMES           [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! PLUS_MAT        [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! MINUS_MAT       [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! TIMES_MAT       [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 104

    (16) expression -> expression MINUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 16 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 16 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 16 (expression -> expression MINUS expression .)
    TRANSPOSE       reduce using rule 16 (expression -> expression MINUS expression .)
    EQ              reduce using rule 16 (expression -> expression MINUS expression .)
    NE              reduce using rule 16 (expression -> expression MINUS expression .)
    GT              reduce using rule 16 (expression -> expression MINUS expression .)
    GE              reduce using rule 16 (expression -> expression MINUS expression .)
    LT              reduce using rule 16 (expression -> expression MINUS expression .)
    LE              reduce using rule 16 (expression -> expression MINUS expression .)
    ,               reduce using rule 16 (expression -> expression MINUS expression .)
    ]               reduce using rule 16 (expression -> expression MINUS expression .)
    :               reduce using rule 16 (expression -> expression MINUS expression .)
    )               reduce using rule 16 (expression -> expression MINUS expression .)
    {               reduce using rule 16 (expression -> expression MINUS expression .)
    ID              reduce using rule 16 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 16 (expression -> expression MINUS expression .)
    FOR             reduce using rule 16 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 16 (expression -> expression MINUS expression .)
    IF              reduce using rule 16 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 16 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 16 (expression -> expression MINUS expression .)
    CONTINUE        reduce using rule 16 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! TIMES           [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! PLUS_MAT        [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! MINUS_MAT       [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! TIMES_MAT       [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 105

    (17) expression -> expression TIMES expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 17 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 17 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 17 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 17 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 17 (expression -> expression TIMES expression .)
    TRANSPOSE       reduce using rule 17 (expression -> expression TIMES expression .)
    EQ              reduce using rule 17 (expression -> expression TIMES expression .)
    NE              reduce using rule 17 (expression -> expression TIMES expression .)
    GT              reduce using rule 17 (expression -> expression TIMES expression .)
    GE              reduce using rule 17 (expression -> expression TIMES expression .)
    LT              reduce using rule 17 (expression -> expression TIMES expression .)
    LE              reduce using rule 17 (expression -> expression TIMES expression .)
    ,               reduce using rule 17 (expression -> expression TIMES expression .)
    ]               reduce using rule 17 (expression -> expression TIMES expression .)
    :               reduce using rule 17 (expression -> expression TIMES expression .)
    )               reduce using rule 17 (expression -> expression TIMES expression .)
    {               reduce using rule 17 (expression -> expression TIMES expression .)
    ID              reduce using rule 17 (expression -> expression TIMES expression .)
    RETURN          reduce using rule 17 (expression -> expression TIMES expression .)
    FOR             reduce using rule 17 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 17 (expression -> expression TIMES expression .)
    IF              reduce using rule 17 (expression -> expression TIMES expression .)
    PRINT           reduce using rule 17 (expression -> expression TIMES expression .)
    BREAK           reduce using rule 17 (expression -> expression TIMES expression .)
    CONTINUE        reduce using rule 17 (expression -> expression TIMES expression .)
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! PLUS_MAT        [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! MINUS_MAT       [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! TIMES_MAT       [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIVIDE          [ shift and go to state 61 ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 106

    (18) expression -> expression DIVIDE expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 18 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 18 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 18 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 18 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 18 (expression -> expression DIVIDE expression .)
    TRANSPOSE       reduce using rule 18 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 18 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 18 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 18 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 18 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 18 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 18 (expression -> expression DIVIDE expression .)
    ,               reduce using rule 18 (expression -> expression DIVIDE expression .)
    ]               reduce using rule 18 (expression -> expression DIVIDE expression .)
    :               reduce using rule 18 (expression -> expression DIVIDE expression .)
    )               reduce using rule 18 (expression -> expression DIVIDE expression .)
    {               reduce using rule 18 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 18 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 18 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 18 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 18 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 18 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 18 (expression -> expression DIVIDE expression .)
    BREAK           reduce using rule 18 (expression -> expression DIVIDE expression .)
    CONTINUE        reduce using rule 18 (expression -> expression DIVIDE expression .)
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! PLUS_MAT        [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! MINUS_MAT       [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! TIMES_MAT       [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIVIDE          [ shift and go to state 61 ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 107

    (19) expression -> expression PLUS_MAT expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    PLUS            reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    MINUS           reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    TIMES           reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    DIVIDE          reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    PLUS_MAT        reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    MINUS_MAT       reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    TRANSPOSE       reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    EQ              reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    NE              reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    GT              reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    GE              reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    LT              reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    LE              reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    ,               reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    ]               reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    :               reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    )               reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    {               reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    ID              reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    RETURN          reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    FOR             reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    WHILE           reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    IF              reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    PRINT           reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    BREAK           reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    CONTINUE        reduce using rule 19 (expression -> expression PLUS_MAT expression .)
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! TIMES_MAT       [ reduce using rule 19 (expression -> expression PLUS_MAT expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 19 (expression -> expression PLUS_MAT expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIVIDE          [ shift and go to state 61 ]
  ! PLUS_MAT        [ shift and go to state 62 ]
  ! MINUS_MAT       [ shift and go to state 63 ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 108

    (20) expression -> expression MINUS_MAT expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    PLUS            reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    MINUS           reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    TIMES           reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    DIVIDE          reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    PLUS_MAT        reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    MINUS_MAT       reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    TRANSPOSE       reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    EQ              reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    NE              reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    GT              reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    GE              reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    LT              reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    LE              reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    ,               reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    ]               reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    :               reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    )               reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    {               reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    ID              reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    RETURN          reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    FOR             reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    WHILE           reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    IF              reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    PRINT           reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    BREAK           reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    CONTINUE        reduce using rule 20 (expression -> expression MINUS_MAT expression .)
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! TIMES_MAT       [ reduce using rule 20 (expression -> expression MINUS_MAT expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 20 (expression -> expression MINUS_MAT expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIVIDE          [ shift and go to state 61 ]
  ! PLUS_MAT        [ shift and go to state 62 ]
  ! MINUS_MAT       [ shift and go to state 63 ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 109

    (21) expression -> expression TIMES_MAT expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    PLUS            reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    MINUS           reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    TIMES           reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    DIVIDE          reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    PLUS_MAT        reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    MINUS_MAT       reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    TIMES_MAT       reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    DIVIDE_MAT      reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    TRANSPOSE       reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    EQ              reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    NE              reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    GT              reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    GE              reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    LT              reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    LE              reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    ,               reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    ]               reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    :               reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    )               reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    {               reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    ID              reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    RETURN          reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    FOR             reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    WHILE           reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    IF              reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    PRINT           reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    BREAK           reduce using rule 21 (expression -> expression TIMES_MAT expression .)
    CONTINUE        reduce using rule 21 (expression -> expression TIMES_MAT expression .)

  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIVIDE          [ shift and go to state 61 ]
  ! PLUS_MAT        [ shift and go to state 62 ]
  ! MINUS_MAT       [ shift and go to state 63 ]
  ! TIMES_MAT       [ shift and go to state 64 ]
  ! DIVIDE_MAT      [ shift and go to state 65 ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 110

    (22) expression -> expression DIVIDE_MAT expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    PLUS            reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    MINUS           reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    TIMES           reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    DIVIDE          reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    PLUS_MAT        reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    MINUS_MAT       reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    TIMES_MAT       reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    DIVIDE_MAT      reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    TRANSPOSE       reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    EQ              reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    NE              reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    GT              reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    GE              reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    LT              reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    LE              reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    ,               reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    ]               reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    :               reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    )               reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    {               reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    ID              reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    RETURN          reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    FOR             reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    WHILE           reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    IF              reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    PRINT           reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    BREAK           reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)
    CONTINUE        reduce using rule 22 (expression -> expression DIVIDE_MAT expression .)

  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIVIDE          [ shift and go to state 61 ]
  ! PLUS_MAT        [ shift and go to state 62 ]
  ! MINUS_MAT       [ shift and go to state 63 ]
  ! TIMES_MAT       [ shift and go to state 64 ]
  ! DIVIDE_MAT      [ shift and go to state 65 ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 111

    (24) expression -> expression EQ expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 24 (expression -> expression EQ expression .)
    TRANSPOSE       reduce using rule 24 (expression -> expression EQ expression .)
    EQ              reduce using rule 24 (expression -> expression EQ expression .)
    NE              reduce using rule 24 (expression -> expression EQ expression .)
    GT              reduce using rule 24 (expression -> expression EQ expression .)
    GE              reduce using rule 24 (expression -> expression EQ expression .)
    LT              reduce using rule 24 (expression -> expression EQ expression .)
    LE              reduce using rule 24 (expression -> expression EQ expression .)
    ,               reduce using rule 24 (expression -> expression EQ expression .)
    ]               reduce using rule 24 (expression -> expression EQ expression .)
    :               reduce using rule 24 (expression -> expression EQ expression .)
    )               reduce using rule 24 (expression -> expression EQ expression .)
    {               reduce using rule 24 (expression -> expression EQ expression .)
    ID              reduce using rule 24 (expression -> expression EQ expression .)
    RETURN          reduce using rule 24 (expression -> expression EQ expression .)
    FOR             reduce using rule 24 (expression -> expression EQ expression .)
    WHILE           reduce using rule 24 (expression -> expression EQ expression .)
    IF              reduce using rule 24 (expression -> expression EQ expression .)
    PRINT           reduce using rule 24 (expression -> expression EQ expression .)
    BREAK           reduce using rule 24 (expression -> expression EQ expression .)
    CONTINUE        reduce using rule 24 (expression -> expression EQ expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! PLUS            [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! PLUS_MAT        [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! MINUS_MAT       [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! TIMES_MAT       [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 112

    (25) expression -> expression NE expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 25 (expression -> expression NE expression .)
    TRANSPOSE       reduce using rule 25 (expression -> expression NE expression .)
    EQ              reduce using rule 25 (expression -> expression NE expression .)
    NE              reduce using rule 25 (expression -> expression NE expression .)
    GT              reduce using rule 25 (expression -> expression NE expression .)
    GE              reduce using rule 25 (expression -> expression NE expression .)
    LT              reduce using rule 25 (expression -> expression NE expression .)
    LE              reduce using rule 25 (expression -> expression NE expression .)
    ,               reduce using rule 25 (expression -> expression NE expression .)
    ]               reduce using rule 25 (expression -> expression NE expression .)
    :               reduce using rule 25 (expression -> expression NE expression .)
    )               reduce using rule 25 (expression -> expression NE expression .)
    {               reduce using rule 25 (expression -> expression NE expression .)
    ID              reduce using rule 25 (expression -> expression NE expression .)
    RETURN          reduce using rule 25 (expression -> expression NE expression .)
    FOR             reduce using rule 25 (expression -> expression NE expression .)
    WHILE           reduce using rule 25 (expression -> expression NE expression .)
    IF              reduce using rule 25 (expression -> expression NE expression .)
    PRINT           reduce using rule 25 (expression -> expression NE expression .)
    BREAK           reduce using rule 25 (expression -> expression NE expression .)
    CONTINUE        reduce using rule 25 (expression -> expression NE expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! PLUS            [ reduce using rule 25 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 25 (expression -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 25 (expression -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> expression NE expression .) ]
  ! PLUS_MAT        [ reduce using rule 25 (expression -> expression NE expression .) ]
  ! MINUS_MAT       [ reduce using rule 25 (expression -> expression NE expression .) ]
  ! TIMES_MAT       [ reduce using rule 25 (expression -> expression NE expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 25 (expression -> expression NE expression .) ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 113

    (26) expression -> expression GT expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 26 (expression -> expression GT expression .)
    TRANSPOSE       reduce using rule 26 (expression -> expression GT expression .)
    EQ              reduce using rule 26 (expression -> expression GT expression .)
    NE              reduce using rule 26 (expression -> expression GT expression .)
    GT              reduce using rule 26 (expression -> expression GT expression .)
    GE              reduce using rule 26 (expression -> expression GT expression .)
    LT              reduce using rule 26 (expression -> expression GT expression .)
    LE              reduce using rule 26 (expression -> expression GT expression .)
    ,               reduce using rule 26 (expression -> expression GT expression .)
    ]               reduce using rule 26 (expression -> expression GT expression .)
    :               reduce using rule 26 (expression -> expression GT expression .)
    )               reduce using rule 26 (expression -> expression GT expression .)
    {               reduce using rule 26 (expression -> expression GT expression .)
    ID              reduce using rule 26 (expression -> expression GT expression .)
    RETURN          reduce using rule 26 (expression -> expression GT expression .)
    FOR             reduce using rule 26 (expression -> expression GT expression .)
    WHILE           reduce using rule 26 (expression -> expression GT expression .)
    IF              reduce using rule 26 (expression -> expression GT expression .)
    PRINT           reduce using rule 26 (expression -> expression GT expression .)
    BREAK           reduce using rule 26 (expression -> expression GT expression .)
    CONTINUE        reduce using rule 26 (expression -> expression GT expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! PLUS            [ reduce using rule 26 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 26 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 26 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 26 (expression -> expression GT expression .) ]
  ! PLUS_MAT        [ reduce using rule 26 (expression -> expression GT expression .) ]
  ! MINUS_MAT       [ reduce using rule 26 (expression -> expression GT expression .) ]
  ! TIMES_MAT       [ reduce using rule 26 (expression -> expression GT expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 26 (expression -> expression GT expression .) ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 114

    (27) expression -> expression GE expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 27 (expression -> expression GE expression .)
    TRANSPOSE       reduce using rule 27 (expression -> expression GE expression .)
    EQ              reduce using rule 27 (expression -> expression GE expression .)
    NE              reduce using rule 27 (expression -> expression GE expression .)
    GT              reduce using rule 27 (expression -> expression GE expression .)
    GE              reduce using rule 27 (expression -> expression GE expression .)
    LT              reduce using rule 27 (expression -> expression GE expression .)
    LE              reduce using rule 27 (expression -> expression GE expression .)
    ,               reduce using rule 27 (expression -> expression GE expression .)
    ]               reduce using rule 27 (expression -> expression GE expression .)
    :               reduce using rule 27 (expression -> expression GE expression .)
    )               reduce using rule 27 (expression -> expression GE expression .)
    {               reduce using rule 27 (expression -> expression GE expression .)
    ID              reduce using rule 27 (expression -> expression GE expression .)
    RETURN          reduce using rule 27 (expression -> expression GE expression .)
    FOR             reduce using rule 27 (expression -> expression GE expression .)
    WHILE           reduce using rule 27 (expression -> expression GE expression .)
    IF              reduce using rule 27 (expression -> expression GE expression .)
    PRINT           reduce using rule 27 (expression -> expression GE expression .)
    BREAK           reduce using rule 27 (expression -> expression GE expression .)
    CONTINUE        reduce using rule 27 (expression -> expression GE expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! PLUS            [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! PLUS_MAT        [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! MINUS_MAT       [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! TIMES_MAT       [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 27 (expression -> expression GE expression .) ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 115

    (28) expression -> expression LT expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 28 (expression -> expression LT expression .)
    TRANSPOSE       reduce using rule 28 (expression -> expression LT expression .)
    EQ              reduce using rule 28 (expression -> expression LT expression .)
    NE              reduce using rule 28 (expression -> expression LT expression .)
    GT              reduce using rule 28 (expression -> expression LT expression .)
    GE              reduce using rule 28 (expression -> expression LT expression .)
    LT              reduce using rule 28 (expression -> expression LT expression .)
    LE              reduce using rule 28 (expression -> expression LT expression .)
    ,               reduce using rule 28 (expression -> expression LT expression .)
    ]               reduce using rule 28 (expression -> expression LT expression .)
    :               reduce using rule 28 (expression -> expression LT expression .)
    )               reduce using rule 28 (expression -> expression LT expression .)
    {               reduce using rule 28 (expression -> expression LT expression .)
    ID              reduce using rule 28 (expression -> expression LT expression .)
    RETURN          reduce using rule 28 (expression -> expression LT expression .)
    FOR             reduce using rule 28 (expression -> expression LT expression .)
    WHILE           reduce using rule 28 (expression -> expression LT expression .)
    IF              reduce using rule 28 (expression -> expression LT expression .)
    PRINT           reduce using rule 28 (expression -> expression LT expression .)
    BREAK           reduce using rule 28 (expression -> expression LT expression .)
    CONTINUE        reduce using rule 28 (expression -> expression LT expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! PLUS            [ reduce using rule 28 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 28 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 28 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 28 (expression -> expression LT expression .) ]
  ! PLUS_MAT        [ reduce using rule 28 (expression -> expression LT expression .) ]
  ! MINUS_MAT       [ reduce using rule 28 (expression -> expression LT expression .) ]
  ! TIMES_MAT       [ reduce using rule 28 (expression -> expression LT expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 28 (expression -> expression LT expression .) ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 116

    (29) expression -> expression LE expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 29 (expression -> expression LE expression .)
    TRANSPOSE       reduce using rule 29 (expression -> expression LE expression .)
    EQ              reduce using rule 29 (expression -> expression LE expression .)
    NE              reduce using rule 29 (expression -> expression LE expression .)
    GT              reduce using rule 29 (expression -> expression LE expression .)
    GE              reduce using rule 29 (expression -> expression LE expression .)
    LT              reduce using rule 29 (expression -> expression LE expression .)
    LE              reduce using rule 29 (expression -> expression LE expression .)
    ,               reduce using rule 29 (expression -> expression LE expression .)
    ]               reduce using rule 29 (expression -> expression LE expression .)
    :               reduce using rule 29 (expression -> expression LE expression .)
    )               reduce using rule 29 (expression -> expression LE expression .)
    {               reduce using rule 29 (expression -> expression LE expression .)
    ID              reduce using rule 29 (expression -> expression LE expression .)
    RETURN          reduce using rule 29 (expression -> expression LE expression .)
    FOR             reduce using rule 29 (expression -> expression LE expression .)
    WHILE           reduce using rule 29 (expression -> expression LE expression .)
    IF              reduce using rule 29 (expression -> expression LE expression .)
    PRINT           reduce using rule 29 (expression -> expression LE expression .)
    BREAK           reduce using rule 29 (expression -> expression LE expression .)
    CONTINUE        reduce using rule 29 (expression -> expression LE expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65

  ! PLUS            [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! PLUS_MAT        [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! MINUS_MAT       [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! TIMES_MAT       [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! DIVIDE_MAT      [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! TRANSPOSE       [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NE              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! GE              [ shift and go to state 70 ]
  ! LT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]


state 117

    (8) expression -> [ expression ] .

    ;               reduce using rule 8 (expression -> [ expression ] .)
    PLUS            reduce using rule 8 (expression -> [ expression ] .)
    MINUS           reduce using rule 8 (expression -> [ expression ] .)
    TIMES           reduce using rule 8 (expression -> [ expression ] .)
    DIVIDE          reduce using rule 8 (expression -> [ expression ] .)
    PLUS_MAT        reduce using rule 8 (expression -> [ expression ] .)
    MINUS_MAT       reduce using rule 8 (expression -> [ expression ] .)
    TIMES_MAT       reduce using rule 8 (expression -> [ expression ] .)
    DIVIDE_MAT      reduce using rule 8 (expression -> [ expression ] .)
    TRANSPOSE       reduce using rule 8 (expression -> [ expression ] .)
    EQ              reduce using rule 8 (expression -> [ expression ] .)
    NE              reduce using rule 8 (expression -> [ expression ] .)
    GT              reduce using rule 8 (expression -> [ expression ] .)
    GE              reduce using rule 8 (expression -> [ expression ] .)
    LT              reduce using rule 8 (expression -> [ expression ] .)
    LE              reduce using rule 8 (expression -> [ expression ] .)
    ,               reduce using rule 8 (expression -> [ expression ] .)
    ]               reduce using rule 8 (expression -> [ expression ] .)
    :               reduce using rule 8 (expression -> [ expression ] .)
    )               reduce using rule 8 (expression -> [ expression ] .)
    {               reduce using rule 8 (expression -> [ expression ] .)
    ID              reduce using rule 8 (expression -> [ expression ] .)
    RETURN          reduce using rule 8 (expression -> [ expression ] .)
    FOR             reduce using rule 8 (expression -> [ expression ] .)
    WHILE           reduce using rule 8 (expression -> [ expression ] .)
    IF              reduce using rule 8 (expression -> [ expression ] .)
    PRINT           reduce using rule 8 (expression -> [ expression ] .)
    BREAK           reduce using rule 8 (expression -> [ expression ] .)
    CONTINUE        reduce using rule 8 (expression -> [ expression ] .)


state 118

    (9) expression -> [ inner_table ] .

    ;               reduce using rule 9 (expression -> [ inner_table ] .)
    PLUS            reduce using rule 9 (expression -> [ inner_table ] .)
    MINUS           reduce using rule 9 (expression -> [ inner_table ] .)
    TIMES           reduce using rule 9 (expression -> [ inner_table ] .)
    DIVIDE          reduce using rule 9 (expression -> [ inner_table ] .)
    PLUS_MAT        reduce using rule 9 (expression -> [ inner_table ] .)
    MINUS_MAT       reduce using rule 9 (expression -> [ inner_table ] .)
    TIMES_MAT       reduce using rule 9 (expression -> [ inner_table ] .)
    DIVIDE_MAT      reduce using rule 9 (expression -> [ inner_table ] .)
    TRANSPOSE       reduce using rule 9 (expression -> [ inner_table ] .)
    EQ              reduce using rule 9 (expression -> [ inner_table ] .)
    NE              reduce using rule 9 (expression -> [ inner_table ] .)
    GT              reduce using rule 9 (expression -> [ inner_table ] .)
    GE              reduce using rule 9 (expression -> [ inner_table ] .)
    LT              reduce using rule 9 (expression -> [ inner_table ] .)
    LE              reduce using rule 9 (expression -> [ inner_table ] .)
    ,               reduce using rule 9 (expression -> [ inner_table ] .)
    ]               reduce using rule 9 (expression -> [ inner_table ] .)
    :               reduce using rule 9 (expression -> [ inner_table ] .)
    )               reduce using rule 9 (expression -> [ inner_table ] .)
    {               reduce using rule 9 (expression -> [ inner_table ] .)
    ID              reduce using rule 9 (expression -> [ inner_table ] .)
    RETURN          reduce using rule 9 (expression -> [ inner_table ] .)
    FOR             reduce using rule 9 (expression -> [ inner_table ] .)
    WHILE           reduce using rule 9 (expression -> [ inner_table ] .)
    IF              reduce using rule 9 (expression -> [ inner_table ] .)
    PRINT           reduce using rule 9 (expression -> [ inner_table ] .)
    BREAK           reduce using rule 9 (expression -> [ inner_table ] .)
    CONTINUE        reduce using rule 9 (expression -> [ inner_table ] .)


state 119

    (10) expression -> ZEROS ( expression . )
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    )               shift and go to state 133
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 120

    (11) expression -> EYE ( expression . )
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    )               shift and go to state 134
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 121

    (12) expression -> ONES ( expression . )
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    )               shift and go to state 135
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 122

    (62) statement -> FOR ID ASSIGN range . code_block
    (63) statement -> FOR ID ASSIGN range . loop_block
    (64) statement -> FOR ID ASSIGN range . statement
    (65) statement -> FOR ID ASSIGN range . loop_statement
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (56) loop_block -> . { loop_statements_list }
    (57) loop_block -> . { loop_statement }
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (54) loop_statement -> . BREAK ;
    (55) loop_statement -> . CONTINUE ;
    (76) loop_statement -> . IF ( expression ) loop_statement
    (77) loop_statement -> . IF ( expression ) loop_block
    (78) loop_statement -> . IF ( expression ) loop_statement loop_else_block
    (79) loop_statement -> . IF ( expression ) statement loop_else_block
    (80) loop_statement -> . IF ( expression ) loop_statement else_block
    (81) loop_statement -> . IF ( expression ) loop_block loop_else_block
    (82) loop_statement -> . IF ( expression ) code_block loop_else_block
    (83) loop_statement -> . IF ( expression ) loop_block else_block
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    {               shift and go to state 140
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 141
    PRINT           shift and go to state 9
    BREAK           shift and go to state 142
    CONTINUE        shift and go to state 143

    code_block                     shift and go to state 136
    loop_block                     shift and go to state 137
    statement                      shift and go to state 138
    loop_statement                 shift and go to state 139
    slice                          shift and go to state 4

state 123

    (13) range -> expression . : expression
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    :               shift and go to state 95
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 124

    (66) statement -> WHILE ( expression ) . code_block
    (67) statement -> WHILE ( expression ) . loop_block
    (68) statement -> WHILE ( expression ) . statement
    (69) statement -> WHILE ( expression ) . loop_statement
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (56) loop_block -> . { loop_statements_list }
    (57) loop_block -> . { loop_statement }
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (54) loop_statement -> . BREAK ;
    (55) loop_statement -> . CONTINUE ;
    (76) loop_statement -> . IF ( expression ) loop_statement
    (77) loop_statement -> . IF ( expression ) loop_block
    (78) loop_statement -> . IF ( expression ) loop_statement loop_else_block
    (79) loop_statement -> . IF ( expression ) statement loop_else_block
    (80) loop_statement -> . IF ( expression ) loop_statement else_block
    (81) loop_statement -> . IF ( expression ) loop_block loop_else_block
    (82) loop_statement -> . IF ( expression ) code_block loop_else_block
    (83) loop_statement -> . IF ( expression ) loop_block else_block
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    {               shift and go to state 140
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 141
    PRINT           shift and go to state 9
    BREAK           shift and go to state 142
    CONTINUE        shift and go to state 143

    code_block                     shift and go to state 144
    loop_block                     shift and go to state 145
    statement                      shift and go to state 146
    loop_statement                 shift and go to state 147
    slice                          shift and go to state 4

state 125

    (70) statement -> IF ( expression ) . statement
    (71) statement -> IF ( expression ) . code_block
    (72) statement -> IF ( expression ) . statement else_block
    (73) statement -> IF ( expression ) . code_block else_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    PRINT           shift and go to state 9
    {               shift and go to state 12

    statement                      shift and go to state 148
    code_block                     shift and go to state 149
    slice                          shift and go to state 4

state 126

    (7) inner_table -> inner_table , expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 7 (inner_table -> inner_table , expression .)
    ,               reduce using rule 7 (inner_table -> inner_table , expression .)
    ]               reduce using rule 7 (inner_table -> inner_table , expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 127

    (6) inner_table -> expression , expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ;               reduce using rule 6 (inner_table -> expression , expression .)
    ,               reduce using rule 6 (inner_table -> expression , expression .)
    ]               reduce using rule 6 (inner_table -> expression , expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 128

    (37) slice -> ID [ expression , expression . ]
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression
    (13) range -> expression . : expression

    ]               shift and go to state 150
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72
    :               shift and go to state 95


state 129

    (38) slice -> ID [ expression , range . ]

    ]               shift and go to state 151


state 130

    (13) range -> expression : expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    ]               reduce using rule 13 (range -> expression : expression .)
    ,               reduce using rule 13 (range -> expression : expression .)
    {               reduce using rule 13 (range -> expression : expression .)
    ID              reduce using rule 13 (range -> expression : expression .)
    RETURN          reduce using rule 13 (range -> expression : expression .)
    FOR             reduce using rule 13 (range -> expression : expression .)
    WHILE           reduce using rule 13 (range -> expression : expression .)
    IF              reduce using rule 13 (range -> expression : expression .)
    PRINT           reduce using rule 13 (range -> expression : expression .)
    BREAK           reduce using rule 13 (range -> expression : expression .)
    CONTINUE        reduce using rule 13 (range -> expression : expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 131

    (40) slice -> ID [ range , range . ]

    ]               shift and go to state 152


state 132

    (39) slice -> ID [ range , expression . ]
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression
    (13) range -> expression . : expression

    ]               shift and go to state 153
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72
    :               shift and go to state 95


state 133

    (10) expression -> ZEROS ( expression ) .

    ;               reduce using rule 10 (expression -> ZEROS ( expression ) .)
    PLUS            reduce using rule 10 (expression -> ZEROS ( expression ) .)
    MINUS           reduce using rule 10 (expression -> ZEROS ( expression ) .)
    TIMES           reduce using rule 10 (expression -> ZEROS ( expression ) .)
    DIVIDE          reduce using rule 10 (expression -> ZEROS ( expression ) .)
    PLUS_MAT        reduce using rule 10 (expression -> ZEROS ( expression ) .)
    MINUS_MAT       reduce using rule 10 (expression -> ZEROS ( expression ) .)
    TIMES_MAT       reduce using rule 10 (expression -> ZEROS ( expression ) .)
    DIVIDE_MAT      reduce using rule 10 (expression -> ZEROS ( expression ) .)
    TRANSPOSE       reduce using rule 10 (expression -> ZEROS ( expression ) .)
    EQ              reduce using rule 10 (expression -> ZEROS ( expression ) .)
    NE              reduce using rule 10 (expression -> ZEROS ( expression ) .)
    GT              reduce using rule 10 (expression -> ZEROS ( expression ) .)
    GE              reduce using rule 10 (expression -> ZEROS ( expression ) .)
    LT              reduce using rule 10 (expression -> ZEROS ( expression ) .)
    LE              reduce using rule 10 (expression -> ZEROS ( expression ) .)
    ,               reduce using rule 10 (expression -> ZEROS ( expression ) .)
    ]               reduce using rule 10 (expression -> ZEROS ( expression ) .)
    :               reduce using rule 10 (expression -> ZEROS ( expression ) .)
    )               reduce using rule 10 (expression -> ZEROS ( expression ) .)
    {               reduce using rule 10 (expression -> ZEROS ( expression ) .)
    ID              reduce using rule 10 (expression -> ZEROS ( expression ) .)
    RETURN          reduce using rule 10 (expression -> ZEROS ( expression ) .)
    FOR             reduce using rule 10 (expression -> ZEROS ( expression ) .)
    WHILE           reduce using rule 10 (expression -> ZEROS ( expression ) .)
    IF              reduce using rule 10 (expression -> ZEROS ( expression ) .)
    PRINT           reduce using rule 10 (expression -> ZEROS ( expression ) .)
    BREAK           reduce using rule 10 (expression -> ZEROS ( expression ) .)
    CONTINUE        reduce using rule 10 (expression -> ZEROS ( expression ) .)


state 134

    (11) expression -> EYE ( expression ) .

    ;               reduce using rule 11 (expression -> EYE ( expression ) .)
    PLUS            reduce using rule 11 (expression -> EYE ( expression ) .)
    MINUS           reduce using rule 11 (expression -> EYE ( expression ) .)
    TIMES           reduce using rule 11 (expression -> EYE ( expression ) .)
    DIVIDE          reduce using rule 11 (expression -> EYE ( expression ) .)
    PLUS_MAT        reduce using rule 11 (expression -> EYE ( expression ) .)
    MINUS_MAT       reduce using rule 11 (expression -> EYE ( expression ) .)
    TIMES_MAT       reduce using rule 11 (expression -> EYE ( expression ) .)
    DIVIDE_MAT      reduce using rule 11 (expression -> EYE ( expression ) .)
    TRANSPOSE       reduce using rule 11 (expression -> EYE ( expression ) .)
    EQ              reduce using rule 11 (expression -> EYE ( expression ) .)
    NE              reduce using rule 11 (expression -> EYE ( expression ) .)
    GT              reduce using rule 11 (expression -> EYE ( expression ) .)
    GE              reduce using rule 11 (expression -> EYE ( expression ) .)
    LT              reduce using rule 11 (expression -> EYE ( expression ) .)
    LE              reduce using rule 11 (expression -> EYE ( expression ) .)
    ,               reduce using rule 11 (expression -> EYE ( expression ) .)
    ]               reduce using rule 11 (expression -> EYE ( expression ) .)
    :               reduce using rule 11 (expression -> EYE ( expression ) .)
    )               reduce using rule 11 (expression -> EYE ( expression ) .)
    {               reduce using rule 11 (expression -> EYE ( expression ) .)
    ID              reduce using rule 11 (expression -> EYE ( expression ) .)
    RETURN          reduce using rule 11 (expression -> EYE ( expression ) .)
    FOR             reduce using rule 11 (expression -> EYE ( expression ) .)
    WHILE           reduce using rule 11 (expression -> EYE ( expression ) .)
    IF              reduce using rule 11 (expression -> EYE ( expression ) .)
    PRINT           reduce using rule 11 (expression -> EYE ( expression ) .)
    BREAK           reduce using rule 11 (expression -> EYE ( expression ) .)
    CONTINUE        reduce using rule 11 (expression -> EYE ( expression ) .)


state 135

    (12) expression -> ONES ( expression ) .

    ;               reduce using rule 12 (expression -> ONES ( expression ) .)
    PLUS            reduce using rule 12 (expression -> ONES ( expression ) .)
    MINUS           reduce using rule 12 (expression -> ONES ( expression ) .)
    TIMES           reduce using rule 12 (expression -> ONES ( expression ) .)
    DIVIDE          reduce using rule 12 (expression -> ONES ( expression ) .)
    PLUS_MAT        reduce using rule 12 (expression -> ONES ( expression ) .)
    MINUS_MAT       reduce using rule 12 (expression -> ONES ( expression ) .)
    TIMES_MAT       reduce using rule 12 (expression -> ONES ( expression ) .)
    DIVIDE_MAT      reduce using rule 12 (expression -> ONES ( expression ) .)
    TRANSPOSE       reduce using rule 12 (expression -> ONES ( expression ) .)
    EQ              reduce using rule 12 (expression -> ONES ( expression ) .)
    NE              reduce using rule 12 (expression -> ONES ( expression ) .)
    GT              reduce using rule 12 (expression -> ONES ( expression ) .)
    GE              reduce using rule 12 (expression -> ONES ( expression ) .)
    LT              reduce using rule 12 (expression -> ONES ( expression ) .)
    LE              reduce using rule 12 (expression -> ONES ( expression ) .)
    ,               reduce using rule 12 (expression -> ONES ( expression ) .)
    ]               reduce using rule 12 (expression -> ONES ( expression ) .)
    :               reduce using rule 12 (expression -> ONES ( expression ) .)
    )               reduce using rule 12 (expression -> ONES ( expression ) .)
    {               reduce using rule 12 (expression -> ONES ( expression ) .)
    ID              reduce using rule 12 (expression -> ONES ( expression ) .)
    RETURN          reduce using rule 12 (expression -> ONES ( expression ) .)
    FOR             reduce using rule 12 (expression -> ONES ( expression ) .)
    WHILE           reduce using rule 12 (expression -> ONES ( expression ) .)
    IF              reduce using rule 12 (expression -> ONES ( expression ) .)
    PRINT           reduce using rule 12 (expression -> ONES ( expression ) .)
    BREAK           reduce using rule 12 (expression -> ONES ( expression ) .)
    CONTINUE        reduce using rule 12 (expression -> ONES ( expression ) .)


state 136

    (62) statement -> FOR ID ASSIGN range code_block .

    ID              reduce using rule 62 (statement -> FOR ID ASSIGN range code_block .)
    RETURN          reduce using rule 62 (statement -> FOR ID ASSIGN range code_block .)
    FOR             reduce using rule 62 (statement -> FOR ID ASSIGN range code_block .)
    WHILE           reduce using rule 62 (statement -> FOR ID ASSIGN range code_block .)
    IF              reduce using rule 62 (statement -> FOR ID ASSIGN range code_block .)
    PRINT           reduce using rule 62 (statement -> FOR ID ASSIGN range code_block .)
    {               reduce using rule 62 (statement -> FOR ID ASSIGN range code_block .)
    $end            reduce using rule 62 (statement -> FOR ID ASSIGN range code_block .)
    }               reduce using rule 62 (statement -> FOR ID ASSIGN range code_block .)
    ELSE            reduce using rule 62 (statement -> FOR ID ASSIGN range code_block .)
    BREAK           reduce using rule 62 (statement -> FOR ID ASSIGN range code_block .)
    CONTINUE        reduce using rule 62 (statement -> FOR ID ASSIGN range code_block .)


state 137

    (63) statement -> FOR ID ASSIGN range loop_block .

    ID              reduce using rule 63 (statement -> FOR ID ASSIGN range loop_block .)
    RETURN          reduce using rule 63 (statement -> FOR ID ASSIGN range loop_block .)
    FOR             reduce using rule 63 (statement -> FOR ID ASSIGN range loop_block .)
    WHILE           reduce using rule 63 (statement -> FOR ID ASSIGN range loop_block .)
    IF              reduce using rule 63 (statement -> FOR ID ASSIGN range loop_block .)
    PRINT           reduce using rule 63 (statement -> FOR ID ASSIGN range loop_block .)
    {               reduce using rule 63 (statement -> FOR ID ASSIGN range loop_block .)
    $end            reduce using rule 63 (statement -> FOR ID ASSIGN range loop_block .)
    }               reduce using rule 63 (statement -> FOR ID ASSIGN range loop_block .)
    ELSE            reduce using rule 63 (statement -> FOR ID ASSIGN range loop_block .)
    BREAK           reduce using rule 63 (statement -> FOR ID ASSIGN range loop_block .)
    CONTINUE        reduce using rule 63 (statement -> FOR ID ASSIGN range loop_block .)


state 138

    (64) statement -> FOR ID ASSIGN range statement .

    ID              reduce using rule 64 (statement -> FOR ID ASSIGN range statement .)
    RETURN          reduce using rule 64 (statement -> FOR ID ASSIGN range statement .)
    FOR             reduce using rule 64 (statement -> FOR ID ASSIGN range statement .)
    WHILE           reduce using rule 64 (statement -> FOR ID ASSIGN range statement .)
    IF              reduce using rule 64 (statement -> FOR ID ASSIGN range statement .)
    PRINT           reduce using rule 64 (statement -> FOR ID ASSIGN range statement .)
    {               reduce using rule 64 (statement -> FOR ID ASSIGN range statement .)
    $end            reduce using rule 64 (statement -> FOR ID ASSIGN range statement .)
    }               reduce using rule 64 (statement -> FOR ID ASSIGN range statement .)
    ELSE            reduce using rule 64 (statement -> FOR ID ASSIGN range statement .)
    BREAK           reduce using rule 64 (statement -> FOR ID ASSIGN range statement .)
    CONTINUE        reduce using rule 64 (statement -> FOR ID ASSIGN range statement .)


state 139

    (65) statement -> FOR ID ASSIGN range loop_statement .

    ID              reduce using rule 65 (statement -> FOR ID ASSIGN range loop_statement .)
    RETURN          reduce using rule 65 (statement -> FOR ID ASSIGN range loop_statement .)
    FOR             reduce using rule 65 (statement -> FOR ID ASSIGN range loop_statement .)
    WHILE           reduce using rule 65 (statement -> FOR ID ASSIGN range loop_statement .)
    IF              reduce using rule 65 (statement -> FOR ID ASSIGN range loop_statement .)
    PRINT           reduce using rule 65 (statement -> FOR ID ASSIGN range loop_statement .)
    {               reduce using rule 65 (statement -> FOR ID ASSIGN range loop_statement .)
    $end            reduce using rule 65 (statement -> FOR ID ASSIGN range loop_statement .)
    }               reduce using rule 65 (statement -> FOR ID ASSIGN range loop_statement .)
    ELSE            reduce using rule 65 (statement -> FOR ID ASSIGN range loop_statement .)
    BREAK           reduce using rule 65 (statement -> FOR ID ASSIGN range loop_statement .)
    CONTINUE        reduce using rule 65 (statement -> FOR ID ASSIGN range loop_statement .)


state 140

    (52) code_block -> { . statements_list }
    (53) code_block -> { . statement }
    (56) loop_block -> { . loop_statements_list }
    (57) loop_block -> { . loop_statement }
    (46) statements_list -> . statements_list statement
    (47) statements_list -> . statements_list code_block
    (48) statements_list -> . statement statement
    (49) statements_list -> . statement code_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (58) loop_statements_list -> . loop_statements_list statement
    (59) loop_statements_list -> . statements_list loop_statement
    (60) loop_statements_list -> . loop_statement statement
    (61) loop_statements_list -> . statement loop_statement
    (54) loop_statement -> . BREAK ;
    (55) loop_statement -> . CONTINUE ;
    (76) loop_statement -> . IF ( expression ) loop_statement
    (77) loop_statement -> . IF ( expression ) loop_block
    (78) loop_statement -> . IF ( expression ) loop_statement loop_else_block
    (79) loop_statement -> . IF ( expression ) statement loop_else_block
    (80) loop_statement -> . IF ( expression ) loop_statement else_block
    (81) loop_statement -> . IF ( expression ) loop_block loop_else_block
    (82) loop_statement -> . IF ( expression ) code_block loop_else_block
    (83) loop_statement -> . IF ( expression ) loop_block else_block
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 141
    PRINT           shift and go to state 9
    BREAK           shift and go to state 142
    CONTINUE        shift and go to state 143

    statements_list                shift and go to state 154
    statement                      shift and go to state 155
    loop_statements_list           shift and go to state 156
    loop_statement                 shift and go to state 157
    slice                          shift and go to state 4

state 141

    (70) statement -> IF . ( expression ) statement
    (71) statement -> IF . ( expression ) code_block
    (72) statement -> IF . ( expression ) statement else_block
    (73) statement -> IF . ( expression ) code_block else_block
    (76) loop_statement -> IF . ( expression ) loop_statement
    (77) loop_statement -> IF . ( expression ) loop_block
    (78) loop_statement -> IF . ( expression ) loop_statement loop_else_block
    (79) loop_statement -> IF . ( expression ) statement loop_else_block
    (80) loop_statement -> IF . ( expression ) loop_statement else_block
    (81) loop_statement -> IF . ( expression ) loop_block loop_else_block
    (82) loop_statement -> IF . ( expression ) code_block loop_else_block
    (83) loop_statement -> IF . ( expression ) loop_block else_block

    (               shift and go to state 158


state 142

    (54) loop_statement -> BREAK . ;

    ;               shift and go to state 159


state 143

    (55) loop_statement -> CONTINUE . ;

    ;               shift and go to state 160


state 144

    (66) statement -> WHILE ( expression ) code_block .

    ID              reduce using rule 66 (statement -> WHILE ( expression ) code_block .)
    RETURN          reduce using rule 66 (statement -> WHILE ( expression ) code_block .)
    FOR             reduce using rule 66 (statement -> WHILE ( expression ) code_block .)
    WHILE           reduce using rule 66 (statement -> WHILE ( expression ) code_block .)
    IF              reduce using rule 66 (statement -> WHILE ( expression ) code_block .)
    PRINT           reduce using rule 66 (statement -> WHILE ( expression ) code_block .)
    {               reduce using rule 66 (statement -> WHILE ( expression ) code_block .)
    $end            reduce using rule 66 (statement -> WHILE ( expression ) code_block .)
    }               reduce using rule 66 (statement -> WHILE ( expression ) code_block .)
    ELSE            reduce using rule 66 (statement -> WHILE ( expression ) code_block .)
    BREAK           reduce using rule 66 (statement -> WHILE ( expression ) code_block .)
    CONTINUE        reduce using rule 66 (statement -> WHILE ( expression ) code_block .)


state 145

    (67) statement -> WHILE ( expression ) loop_block .

    ID              reduce using rule 67 (statement -> WHILE ( expression ) loop_block .)
    RETURN          reduce using rule 67 (statement -> WHILE ( expression ) loop_block .)
    FOR             reduce using rule 67 (statement -> WHILE ( expression ) loop_block .)
    WHILE           reduce using rule 67 (statement -> WHILE ( expression ) loop_block .)
    IF              reduce using rule 67 (statement -> WHILE ( expression ) loop_block .)
    PRINT           reduce using rule 67 (statement -> WHILE ( expression ) loop_block .)
    {               reduce using rule 67 (statement -> WHILE ( expression ) loop_block .)
    $end            reduce using rule 67 (statement -> WHILE ( expression ) loop_block .)
    }               reduce using rule 67 (statement -> WHILE ( expression ) loop_block .)
    ELSE            reduce using rule 67 (statement -> WHILE ( expression ) loop_block .)
    BREAK           reduce using rule 67 (statement -> WHILE ( expression ) loop_block .)
    CONTINUE        reduce using rule 67 (statement -> WHILE ( expression ) loop_block .)


state 146

    (68) statement -> WHILE ( expression ) statement .

    ID              reduce using rule 68 (statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 68 (statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 68 (statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 68 (statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 68 (statement -> WHILE ( expression ) statement .)
    PRINT           reduce using rule 68 (statement -> WHILE ( expression ) statement .)
    {               reduce using rule 68 (statement -> WHILE ( expression ) statement .)
    $end            reduce using rule 68 (statement -> WHILE ( expression ) statement .)
    }               reduce using rule 68 (statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 68 (statement -> WHILE ( expression ) statement .)
    BREAK           reduce using rule 68 (statement -> WHILE ( expression ) statement .)
    CONTINUE        reduce using rule 68 (statement -> WHILE ( expression ) statement .)


state 147

    (69) statement -> WHILE ( expression ) loop_statement .

    ID              reduce using rule 69 (statement -> WHILE ( expression ) loop_statement .)
    RETURN          reduce using rule 69 (statement -> WHILE ( expression ) loop_statement .)
    FOR             reduce using rule 69 (statement -> WHILE ( expression ) loop_statement .)
    WHILE           reduce using rule 69 (statement -> WHILE ( expression ) loop_statement .)
    IF              reduce using rule 69 (statement -> WHILE ( expression ) loop_statement .)
    PRINT           reduce using rule 69 (statement -> WHILE ( expression ) loop_statement .)
    {               reduce using rule 69 (statement -> WHILE ( expression ) loop_statement .)
    $end            reduce using rule 69 (statement -> WHILE ( expression ) loop_statement .)
    }               reduce using rule 69 (statement -> WHILE ( expression ) loop_statement .)
    ELSE            reduce using rule 69 (statement -> WHILE ( expression ) loop_statement .)
    BREAK           reduce using rule 69 (statement -> WHILE ( expression ) loop_statement .)
    CONTINUE        reduce using rule 69 (statement -> WHILE ( expression ) loop_statement .)


state 148

    (70) statement -> IF ( expression ) statement .
    (72) statement -> IF ( expression ) statement . else_block
    (74) else_block -> . ELSE statement
    (75) else_block -> . ELSE code_block

    ID              reduce using rule 70 (statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 70 (statement -> IF ( expression ) statement .)
    FOR             reduce using rule 70 (statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 70 (statement -> IF ( expression ) statement .)
    IF              reduce using rule 70 (statement -> IF ( expression ) statement .)
    PRINT           reduce using rule 70 (statement -> IF ( expression ) statement .)
    {               reduce using rule 70 (statement -> IF ( expression ) statement .)
    $end            reduce using rule 70 (statement -> IF ( expression ) statement .)
    }               reduce using rule 70 (statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 162

  ! ELSE            [ reduce using rule 70 (statement -> IF ( expression ) statement .) ]

    else_block                     shift and go to state 161

state 149

    (71) statement -> IF ( expression ) code_block .
    (73) statement -> IF ( expression ) code_block . else_block
    (74) else_block -> . ELSE statement
    (75) else_block -> . ELSE code_block

    ID              reduce using rule 71 (statement -> IF ( expression ) code_block .)
    RETURN          reduce using rule 71 (statement -> IF ( expression ) code_block .)
    FOR             reduce using rule 71 (statement -> IF ( expression ) code_block .)
    WHILE           reduce using rule 71 (statement -> IF ( expression ) code_block .)
    IF              reduce using rule 71 (statement -> IF ( expression ) code_block .)
    PRINT           reduce using rule 71 (statement -> IF ( expression ) code_block .)
    {               reduce using rule 71 (statement -> IF ( expression ) code_block .)
    $end            reduce using rule 71 (statement -> IF ( expression ) code_block .)
    }               reduce using rule 71 (statement -> IF ( expression ) code_block .)
    ELSE            shift and go to state 162

  ! ELSE            [ reduce using rule 71 (statement -> IF ( expression ) code_block .) ]

    else_block                     shift and go to state 163

state 150

    (37) slice -> ID [ expression , expression ] .

    ASSIGN          reduce using rule 37 (slice -> ID [ expression , expression ] .)
    MINUS_ASSIGN    reduce using rule 37 (slice -> ID [ expression , expression ] .)
    PLUS_ASSIGN     reduce using rule 37 (slice -> ID [ expression , expression ] .)
    TIMES_ASSIGN    reduce using rule 37 (slice -> ID [ expression , expression ] .)
    DIVIDE_ASSIGN   reduce using rule 37 (slice -> ID [ expression , expression ] .)


state 151

    (38) slice -> ID [ expression , range ] .

    ASSIGN          reduce using rule 38 (slice -> ID [ expression , range ] .)
    MINUS_ASSIGN    reduce using rule 38 (slice -> ID [ expression , range ] .)
    PLUS_ASSIGN     reduce using rule 38 (slice -> ID [ expression , range ] .)
    TIMES_ASSIGN    reduce using rule 38 (slice -> ID [ expression , range ] .)
    DIVIDE_ASSIGN   reduce using rule 38 (slice -> ID [ expression , range ] .)


state 152

    (40) slice -> ID [ range , range ] .

    ASSIGN          reduce using rule 40 (slice -> ID [ range , range ] .)
    MINUS_ASSIGN    reduce using rule 40 (slice -> ID [ range , range ] .)
    PLUS_ASSIGN     reduce using rule 40 (slice -> ID [ range , range ] .)
    TIMES_ASSIGN    reduce using rule 40 (slice -> ID [ range , range ] .)
    DIVIDE_ASSIGN   reduce using rule 40 (slice -> ID [ range , range ] .)


state 153

    (39) slice -> ID [ range , expression ] .

    ASSIGN          reduce using rule 39 (slice -> ID [ range , expression ] .)
    MINUS_ASSIGN    reduce using rule 39 (slice -> ID [ range , expression ] .)
    PLUS_ASSIGN     reduce using rule 39 (slice -> ID [ range , expression ] .)
    TIMES_ASSIGN    reduce using rule 39 (slice -> ID [ range , expression ] .)
    DIVIDE_ASSIGN   reduce using rule 39 (slice -> ID [ range , expression ] .)


state 154

    (52) code_block -> { statements_list . }
    (46) statements_list -> statements_list . statement
    (47) statements_list -> statements_list . code_block
    (59) loop_statements_list -> statements_list . loop_statement
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (54) loop_statement -> . BREAK ;
    (55) loop_statement -> . CONTINUE ;
    (76) loop_statement -> . IF ( expression ) loop_statement
    (77) loop_statement -> . IF ( expression ) loop_block
    (78) loop_statement -> . IF ( expression ) loop_statement loop_else_block
    (79) loop_statement -> . IF ( expression ) statement loop_else_block
    (80) loop_statement -> . IF ( expression ) loop_statement else_block
    (81) loop_statement -> . IF ( expression ) loop_block loop_else_block
    (82) loop_statement -> . IF ( expression ) code_block loop_else_block
    (83) loop_statement -> . IF ( expression ) loop_block else_block
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    }               shift and go to state 86
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 141
    PRINT           shift and go to state 9
    {               shift and go to state 12
    BREAK           shift and go to state 142
    CONTINUE        shift and go to state 143

    statement                      shift and go to state 10
    code_block                     shift and go to state 11
    loop_statement                 shift and go to state 164
    slice                          shift and go to state 4

state 155

    (53) code_block -> { statement . }
    (48) statements_list -> statement . statement
    (49) statements_list -> statement . code_block
    (61) loop_statements_list -> statement . loop_statement
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (54) loop_statement -> . BREAK ;
    (55) loop_statement -> . CONTINUE ;
    (76) loop_statement -> . IF ( expression ) loop_statement
    (77) loop_statement -> . IF ( expression ) loop_block
    (78) loop_statement -> . IF ( expression ) loop_statement loop_else_block
    (79) loop_statement -> . IF ( expression ) statement loop_else_block
    (80) loop_statement -> . IF ( expression ) loop_statement else_block
    (81) loop_statement -> . IF ( expression ) loop_block loop_else_block
    (82) loop_statement -> . IF ( expression ) code_block loop_else_block
    (83) loop_statement -> . IF ( expression ) loop_block else_block
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    }               shift and go to state 87
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 141
    PRINT           shift and go to state 9
    {               shift and go to state 12
    BREAK           shift and go to state 142
    CONTINUE        shift and go to state 143

    statement                      shift and go to state 13
    code_block                     shift and go to state 14
    loop_statement                 shift and go to state 165
    slice                          shift and go to state 4

state 156

    (56) loop_block -> { loop_statements_list . }
    (58) loop_statements_list -> loop_statements_list . statement
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    }               shift and go to state 166
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    PRINT           shift and go to state 9

    statement                      shift and go to state 167
    slice                          shift and go to state 4

state 157

    (57) loop_block -> { loop_statement . }
    (60) loop_statements_list -> loop_statement . statement
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    }               shift and go to state 168
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    PRINT           shift and go to state 9

    statement                      shift and go to state 169
    slice                          shift and go to state 4

state 158

    (70) statement -> IF ( . expression ) statement
    (71) statement -> IF ( . expression ) code_block
    (72) statement -> IF ( . expression ) statement else_block
    (73) statement -> IF ( . expression ) code_block else_block
    (76) loop_statement -> IF ( . expression ) loop_statement
    (77) loop_statement -> IF ( . expression ) loop_block
    (78) loop_statement -> IF ( . expression ) loop_statement loop_else_block
    (79) loop_statement -> IF ( . expression ) statement loop_else_block
    (80) loop_statement -> IF ( . expression ) loop_statement else_block
    (81) loop_statement -> IF ( . expression ) loop_block loop_else_block
    (82) loop_statement -> IF ( . expression ) code_block loop_else_block
    (83) loop_statement -> IF ( . expression ) loop_block else_block
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 170
    number                         shift and go to state 29

state 159

    (54) loop_statement -> BREAK ; .

    ID              reduce using rule 54 (loop_statement -> BREAK ; .)
    RETURN          reduce using rule 54 (loop_statement -> BREAK ; .)
    FOR             reduce using rule 54 (loop_statement -> BREAK ; .)
    WHILE           reduce using rule 54 (loop_statement -> BREAK ; .)
    IF              reduce using rule 54 (loop_statement -> BREAK ; .)
    PRINT           reduce using rule 54 (loop_statement -> BREAK ; .)
    {               reduce using rule 54 (loop_statement -> BREAK ; .)
    $end            reduce using rule 54 (loop_statement -> BREAK ; .)
    }               reduce using rule 54 (loop_statement -> BREAK ; .)
    ELSE            reduce using rule 54 (loop_statement -> BREAK ; .)
    BREAK           reduce using rule 54 (loop_statement -> BREAK ; .)
    CONTINUE        reduce using rule 54 (loop_statement -> BREAK ; .)


state 160

    (55) loop_statement -> CONTINUE ; .

    ID              reduce using rule 55 (loop_statement -> CONTINUE ; .)
    RETURN          reduce using rule 55 (loop_statement -> CONTINUE ; .)
    FOR             reduce using rule 55 (loop_statement -> CONTINUE ; .)
    WHILE           reduce using rule 55 (loop_statement -> CONTINUE ; .)
    IF              reduce using rule 55 (loop_statement -> CONTINUE ; .)
    PRINT           reduce using rule 55 (loop_statement -> CONTINUE ; .)
    {               reduce using rule 55 (loop_statement -> CONTINUE ; .)
    $end            reduce using rule 55 (loop_statement -> CONTINUE ; .)
    }               reduce using rule 55 (loop_statement -> CONTINUE ; .)
    ELSE            reduce using rule 55 (loop_statement -> CONTINUE ; .)
    BREAK           reduce using rule 55 (loop_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 55 (loop_statement -> CONTINUE ; .)


state 161

    (72) statement -> IF ( expression ) statement else_block .

    ID              reduce using rule 72 (statement -> IF ( expression ) statement else_block .)
    RETURN          reduce using rule 72 (statement -> IF ( expression ) statement else_block .)
    FOR             reduce using rule 72 (statement -> IF ( expression ) statement else_block .)
    WHILE           reduce using rule 72 (statement -> IF ( expression ) statement else_block .)
    IF              reduce using rule 72 (statement -> IF ( expression ) statement else_block .)
    PRINT           reduce using rule 72 (statement -> IF ( expression ) statement else_block .)
    {               reduce using rule 72 (statement -> IF ( expression ) statement else_block .)
    $end            reduce using rule 72 (statement -> IF ( expression ) statement else_block .)
    }               reduce using rule 72 (statement -> IF ( expression ) statement else_block .)
    ELSE            reduce using rule 72 (statement -> IF ( expression ) statement else_block .)
    BREAK           reduce using rule 72 (statement -> IF ( expression ) statement else_block .)
    CONTINUE        reduce using rule 72 (statement -> IF ( expression ) statement else_block .)


state 162

    (74) else_block -> ELSE . statement
    (75) else_block -> ELSE . code_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    PRINT           shift and go to state 9
    {               shift and go to state 12

    statement                      shift and go to state 171
    code_block                     shift and go to state 172
    slice                          shift and go to state 4

state 163

    (73) statement -> IF ( expression ) code_block else_block .

    ID              reduce using rule 73 (statement -> IF ( expression ) code_block else_block .)
    RETURN          reduce using rule 73 (statement -> IF ( expression ) code_block else_block .)
    FOR             reduce using rule 73 (statement -> IF ( expression ) code_block else_block .)
    WHILE           reduce using rule 73 (statement -> IF ( expression ) code_block else_block .)
    IF              reduce using rule 73 (statement -> IF ( expression ) code_block else_block .)
    PRINT           reduce using rule 73 (statement -> IF ( expression ) code_block else_block .)
    {               reduce using rule 73 (statement -> IF ( expression ) code_block else_block .)
    $end            reduce using rule 73 (statement -> IF ( expression ) code_block else_block .)
    }               reduce using rule 73 (statement -> IF ( expression ) code_block else_block .)
    ELSE            reduce using rule 73 (statement -> IF ( expression ) code_block else_block .)
    BREAK           reduce using rule 73 (statement -> IF ( expression ) code_block else_block .)
    CONTINUE        reduce using rule 73 (statement -> IF ( expression ) code_block else_block .)


state 164

    (59) loop_statements_list -> statements_list loop_statement .

    }               reduce using rule 59 (loop_statements_list -> statements_list loop_statement .)
    ID              reduce using rule 59 (loop_statements_list -> statements_list loop_statement .)
    RETURN          reduce using rule 59 (loop_statements_list -> statements_list loop_statement .)
    FOR             reduce using rule 59 (loop_statements_list -> statements_list loop_statement .)
    WHILE           reduce using rule 59 (loop_statements_list -> statements_list loop_statement .)
    IF              reduce using rule 59 (loop_statements_list -> statements_list loop_statement .)
    PRINT           reduce using rule 59 (loop_statements_list -> statements_list loop_statement .)


state 165

    (61) loop_statements_list -> statement loop_statement .

    }               reduce using rule 61 (loop_statements_list -> statement loop_statement .)
    ID              reduce using rule 61 (loop_statements_list -> statement loop_statement .)
    RETURN          reduce using rule 61 (loop_statements_list -> statement loop_statement .)
    FOR             reduce using rule 61 (loop_statements_list -> statement loop_statement .)
    WHILE           reduce using rule 61 (loop_statements_list -> statement loop_statement .)
    IF              reduce using rule 61 (loop_statements_list -> statement loop_statement .)
    PRINT           reduce using rule 61 (loop_statements_list -> statement loop_statement .)


state 166

    (56) loop_block -> { loop_statements_list } .

    ID              reduce using rule 56 (loop_block -> { loop_statements_list } .)
    RETURN          reduce using rule 56 (loop_block -> { loop_statements_list } .)
    FOR             reduce using rule 56 (loop_block -> { loop_statements_list } .)
    WHILE           reduce using rule 56 (loop_block -> { loop_statements_list } .)
    IF              reduce using rule 56 (loop_block -> { loop_statements_list } .)
    PRINT           reduce using rule 56 (loop_block -> { loop_statements_list } .)
    {               reduce using rule 56 (loop_block -> { loop_statements_list } .)
    $end            reduce using rule 56 (loop_block -> { loop_statements_list } .)
    }               reduce using rule 56 (loop_block -> { loop_statements_list } .)
    ELSE            reduce using rule 56 (loop_block -> { loop_statements_list } .)
    BREAK           reduce using rule 56 (loop_block -> { loop_statements_list } .)
    CONTINUE        reduce using rule 56 (loop_block -> { loop_statements_list } .)


state 167

    (58) loop_statements_list -> loop_statements_list statement .

    }               reduce using rule 58 (loop_statements_list -> loop_statements_list statement .)
    ID              reduce using rule 58 (loop_statements_list -> loop_statements_list statement .)
    RETURN          reduce using rule 58 (loop_statements_list -> loop_statements_list statement .)
    FOR             reduce using rule 58 (loop_statements_list -> loop_statements_list statement .)
    WHILE           reduce using rule 58 (loop_statements_list -> loop_statements_list statement .)
    IF              reduce using rule 58 (loop_statements_list -> loop_statements_list statement .)
    PRINT           reduce using rule 58 (loop_statements_list -> loop_statements_list statement .)


state 168

    (57) loop_block -> { loop_statement } .

    ID              reduce using rule 57 (loop_block -> { loop_statement } .)
    RETURN          reduce using rule 57 (loop_block -> { loop_statement } .)
    FOR             reduce using rule 57 (loop_block -> { loop_statement } .)
    WHILE           reduce using rule 57 (loop_block -> { loop_statement } .)
    IF              reduce using rule 57 (loop_block -> { loop_statement } .)
    PRINT           reduce using rule 57 (loop_block -> { loop_statement } .)
    {               reduce using rule 57 (loop_block -> { loop_statement } .)
    $end            reduce using rule 57 (loop_block -> { loop_statement } .)
    }               reduce using rule 57 (loop_block -> { loop_statement } .)
    ELSE            reduce using rule 57 (loop_block -> { loop_statement } .)
    BREAK           reduce using rule 57 (loop_block -> { loop_statement } .)
    CONTINUE        reduce using rule 57 (loop_block -> { loop_statement } .)


state 169

    (60) loop_statements_list -> loop_statement statement .

    }               reduce using rule 60 (loop_statements_list -> loop_statement statement .)
    ID              reduce using rule 60 (loop_statements_list -> loop_statement statement .)
    RETURN          reduce using rule 60 (loop_statements_list -> loop_statement statement .)
    FOR             reduce using rule 60 (loop_statements_list -> loop_statement statement .)
    WHILE           reduce using rule 60 (loop_statements_list -> loop_statement statement .)
    IF              reduce using rule 60 (loop_statements_list -> loop_statement statement .)
    PRINT           reduce using rule 60 (loop_statements_list -> loop_statement statement .)


state 170

    (70) statement -> IF ( expression . ) statement
    (71) statement -> IF ( expression . ) code_block
    (72) statement -> IF ( expression . ) statement else_block
    (73) statement -> IF ( expression . ) code_block else_block
    (76) loop_statement -> IF ( expression . ) loop_statement
    (77) loop_statement -> IF ( expression . ) loop_block
    (78) loop_statement -> IF ( expression . ) loop_statement loop_else_block
    (79) loop_statement -> IF ( expression . ) statement loop_else_block
    (80) loop_statement -> IF ( expression . ) loop_statement else_block
    (81) loop_statement -> IF ( expression . ) loop_block loop_else_block
    (82) loop_statement -> IF ( expression . ) code_block loop_else_block
    (83) loop_statement -> IF ( expression . ) loop_block else_block
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    )               shift and go to state 173
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 171

    (74) else_block -> ELSE statement .

    ELSE            reduce using rule 74 (else_block -> ELSE statement .)
    ID              reduce using rule 74 (else_block -> ELSE statement .)
    RETURN          reduce using rule 74 (else_block -> ELSE statement .)
    FOR             reduce using rule 74 (else_block -> ELSE statement .)
    WHILE           reduce using rule 74 (else_block -> ELSE statement .)
    IF              reduce using rule 74 (else_block -> ELSE statement .)
    PRINT           reduce using rule 74 (else_block -> ELSE statement .)
    {               reduce using rule 74 (else_block -> ELSE statement .)
    $end            reduce using rule 74 (else_block -> ELSE statement .)
    }               reduce using rule 74 (else_block -> ELSE statement .)
    BREAK           reduce using rule 74 (else_block -> ELSE statement .)
    CONTINUE        reduce using rule 74 (else_block -> ELSE statement .)


state 172

    (75) else_block -> ELSE code_block .

    ELSE            reduce using rule 75 (else_block -> ELSE code_block .)
    ID              reduce using rule 75 (else_block -> ELSE code_block .)
    RETURN          reduce using rule 75 (else_block -> ELSE code_block .)
    FOR             reduce using rule 75 (else_block -> ELSE code_block .)
    WHILE           reduce using rule 75 (else_block -> ELSE code_block .)
    IF              reduce using rule 75 (else_block -> ELSE code_block .)
    PRINT           reduce using rule 75 (else_block -> ELSE code_block .)
    {               reduce using rule 75 (else_block -> ELSE code_block .)
    $end            reduce using rule 75 (else_block -> ELSE code_block .)
    }               reduce using rule 75 (else_block -> ELSE code_block .)
    BREAK           reduce using rule 75 (else_block -> ELSE code_block .)
    CONTINUE        reduce using rule 75 (else_block -> ELSE code_block .)


state 173

    (70) statement -> IF ( expression ) . statement
    (71) statement -> IF ( expression ) . code_block
    (72) statement -> IF ( expression ) . statement else_block
    (73) statement -> IF ( expression ) . code_block else_block
    (76) loop_statement -> IF ( expression ) . loop_statement
    (77) loop_statement -> IF ( expression ) . loop_block
    (78) loop_statement -> IF ( expression ) . loop_statement loop_else_block
    (79) loop_statement -> IF ( expression ) . statement loop_else_block
    (80) loop_statement -> IF ( expression ) . loop_statement else_block
    (81) loop_statement -> IF ( expression ) . loop_block loop_else_block
    (82) loop_statement -> IF ( expression ) . code_block loop_else_block
    (83) loop_statement -> IF ( expression ) . loop_block else_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (54) loop_statement -> . BREAK ;
    (55) loop_statement -> . CONTINUE ;
    (76) loop_statement -> . IF ( expression ) loop_statement
    (77) loop_statement -> . IF ( expression ) loop_block
    (78) loop_statement -> . IF ( expression ) loop_statement loop_else_block
    (79) loop_statement -> . IF ( expression ) statement loop_else_block
    (80) loop_statement -> . IF ( expression ) loop_statement else_block
    (81) loop_statement -> . IF ( expression ) loop_block loop_else_block
    (82) loop_statement -> . IF ( expression ) code_block loop_else_block
    (83) loop_statement -> . IF ( expression ) loop_block else_block
    (56) loop_block -> . { loop_statements_list }
    (57) loop_block -> . { loop_statement }
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 141
    PRINT           shift and go to state 9
    {               shift and go to state 140
    BREAK           shift and go to state 142
    CONTINUE        shift and go to state 143

    statement                      shift and go to state 174
    code_block                     shift and go to state 175
    loop_statement                 shift and go to state 176
    loop_block                     shift and go to state 177
    slice                          shift and go to state 4

state 174

    (70) statement -> IF ( expression ) statement .
    (72) statement -> IF ( expression ) statement . else_block
    (79) loop_statement -> IF ( expression ) statement . loop_else_block
    (74) else_block -> . ELSE statement
    (75) else_block -> . ELSE code_block
    (84) loop_else_block -> . ELSE loop_statement
    (85) loop_else_block -> . ELSE loop_block

    ID              reduce using rule 70 (statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 70 (statement -> IF ( expression ) statement .)
    FOR             reduce using rule 70 (statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 70 (statement -> IF ( expression ) statement .)
    IF              reduce using rule 70 (statement -> IF ( expression ) statement .)
    PRINT           reduce using rule 70 (statement -> IF ( expression ) statement .)
    {               reduce using rule 70 (statement -> IF ( expression ) statement .)
    $end            reduce using rule 70 (statement -> IF ( expression ) statement .)
    }               reduce using rule 70 (statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 70 (statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 70 (statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 179

  ! ELSE            [ reduce using rule 70 (statement -> IF ( expression ) statement .) ]

    else_block                     shift and go to state 161
    loop_else_block                shift and go to state 178

state 175

    (71) statement -> IF ( expression ) code_block .
    (73) statement -> IF ( expression ) code_block . else_block
    (82) loop_statement -> IF ( expression ) code_block . loop_else_block
    (74) else_block -> . ELSE statement
    (75) else_block -> . ELSE code_block
    (84) loop_else_block -> . ELSE loop_statement
    (85) loop_else_block -> . ELSE loop_block

    ID              reduce using rule 71 (statement -> IF ( expression ) code_block .)
    RETURN          reduce using rule 71 (statement -> IF ( expression ) code_block .)
    FOR             reduce using rule 71 (statement -> IF ( expression ) code_block .)
    WHILE           reduce using rule 71 (statement -> IF ( expression ) code_block .)
    IF              reduce using rule 71 (statement -> IF ( expression ) code_block .)
    PRINT           reduce using rule 71 (statement -> IF ( expression ) code_block .)
    {               reduce using rule 71 (statement -> IF ( expression ) code_block .)
    $end            reduce using rule 71 (statement -> IF ( expression ) code_block .)
    }               reduce using rule 71 (statement -> IF ( expression ) code_block .)
    BREAK           reduce using rule 71 (statement -> IF ( expression ) code_block .)
    CONTINUE        reduce using rule 71 (statement -> IF ( expression ) code_block .)
    ELSE            shift and go to state 179

  ! ELSE            [ reduce using rule 71 (statement -> IF ( expression ) code_block .) ]

    else_block                     shift and go to state 163
    loop_else_block                shift and go to state 180

state 176

    (76) loop_statement -> IF ( expression ) loop_statement .
    (78) loop_statement -> IF ( expression ) loop_statement . loop_else_block
    (80) loop_statement -> IF ( expression ) loop_statement . else_block
    (84) loop_else_block -> . ELSE loop_statement
    (85) loop_else_block -> . ELSE loop_block
    (74) else_block -> . ELSE statement
    (75) else_block -> . ELSE code_block

    ID              reduce using rule 76 (loop_statement -> IF ( expression ) loop_statement .)
    RETURN          reduce using rule 76 (loop_statement -> IF ( expression ) loop_statement .)
    FOR             reduce using rule 76 (loop_statement -> IF ( expression ) loop_statement .)
    WHILE           reduce using rule 76 (loop_statement -> IF ( expression ) loop_statement .)
    IF              reduce using rule 76 (loop_statement -> IF ( expression ) loop_statement .)
    PRINT           reduce using rule 76 (loop_statement -> IF ( expression ) loop_statement .)
    {               reduce using rule 76 (loop_statement -> IF ( expression ) loop_statement .)
    $end            reduce using rule 76 (loop_statement -> IF ( expression ) loop_statement .)
    }               reduce using rule 76 (loop_statement -> IF ( expression ) loop_statement .)
    BREAK           reduce using rule 76 (loop_statement -> IF ( expression ) loop_statement .)
    CONTINUE        reduce using rule 76 (loop_statement -> IF ( expression ) loop_statement .)
    ELSE            shift and go to state 183

  ! ELSE            [ reduce using rule 76 (loop_statement -> IF ( expression ) loop_statement .) ]

    loop_else_block                shift and go to state 181
    else_block                     shift and go to state 182

state 177

    (77) loop_statement -> IF ( expression ) loop_block .
    (81) loop_statement -> IF ( expression ) loop_block . loop_else_block
    (83) loop_statement -> IF ( expression ) loop_block . else_block
    (84) loop_else_block -> . ELSE loop_statement
    (85) loop_else_block -> . ELSE loop_block
    (74) else_block -> . ELSE statement
    (75) else_block -> . ELSE code_block

    ID              reduce using rule 77 (loop_statement -> IF ( expression ) loop_block .)
    RETURN          reduce using rule 77 (loop_statement -> IF ( expression ) loop_block .)
    FOR             reduce using rule 77 (loop_statement -> IF ( expression ) loop_block .)
    WHILE           reduce using rule 77 (loop_statement -> IF ( expression ) loop_block .)
    IF              reduce using rule 77 (loop_statement -> IF ( expression ) loop_block .)
    PRINT           reduce using rule 77 (loop_statement -> IF ( expression ) loop_block .)
    {               reduce using rule 77 (loop_statement -> IF ( expression ) loop_block .)
    $end            reduce using rule 77 (loop_statement -> IF ( expression ) loop_block .)
    }               reduce using rule 77 (loop_statement -> IF ( expression ) loop_block .)
    BREAK           reduce using rule 77 (loop_statement -> IF ( expression ) loop_block .)
    CONTINUE        reduce using rule 77 (loop_statement -> IF ( expression ) loop_block .)
    ELSE            shift and go to state 183

  ! ELSE            [ reduce using rule 77 (loop_statement -> IF ( expression ) loop_block .) ]

    loop_else_block                shift and go to state 184
    else_block                     shift and go to state 185

state 178

    (79) loop_statement -> IF ( expression ) statement loop_else_block .

    ID              reduce using rule 79 (loop_statement -> IF ( expression ) statement loop_else_block .)
    RETURN          reduce using rule 79 (loop_statement -> IF ( expression ) statement loop_else_block .)
    FOR             reduce using rule 79 (loop_statement -> IF ( expression ) statement loop_else_block .)
    WHILE           reduce using rule 79 (loop_statement -> IF ( expression ) statement loop_else_block .)
    IF              reduce using rule 79 (loop_statement -> IF ( expression ) statement loop_else_block .)
    PRINT           reduce using rule 79 (loop_statement -> IF ( expression ) statement loop_else_block .)
    {               reduce using rule 79 (loop_statement -> IF ( expression ) statement loop_else_block .)
    $end            reduce using rule 79 (loop_statement -> IF ( expression ) statement loop_else_block .)
    }               reduce using rule 79 (loop_statement -> IF ( expression ) statement loop_else_block .)
    ELSE            reduce using rule 79 (loop_statement -> IF ( expression ) statement loop_else_block .)
    BREAK           reduce using rule 79 (loop_statement -> IF ( expression ) statement loop_else_block .)
    CONTINUE        reduce using rule 79 (loop_statement -> IF ( expression ) statement loop_else_block .)


state 179

    (74) else_block -> ELSE . statement
    (75) else_block -> ELSE . code_block
    (84) loop_else_block -> ELSE . loop_statement
    (85) loop_else_block -> ELSE . loop_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (54) loop_statement -> . BREAK ;
    (55) loop_statement -> . CONTINUE ;
    (76) loop_statement -> . IF ( expression ) loop_statement
    (77) loop_statement -> . IF ( expression ) loop_block
    (78) loop_statement -> . IF ( expression ) loop_statement loop_else_block
    (79) loop_statement -> . IF ( expression ) statement loop_else_block
    (80) loop_statement -> . IF ( expression ) loop_statement else_block
    (81) loop_statement -> . IF ( expression ) loop_block loop_else_block
    (82) loop_statement -> . IF ( expression ) code_block loop_else_block
    (83) loop_statement -> . IF ( expression ) loop_block else_block
    (56) loop_block -> . { loop_statements_list }
    (57) loop_block -> . { loop_statement }
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 141
    PRINT           shift and go to state 9
    {               shift and go to state 140
    BREAK           shift and go to state 142
    CONTINUE        shift and go to state 143

    statement                      shift and go to state 171
    code_block                     shift and go to state 172
    loop_statement                 shift and go to state 186
    loop_block                     shift and go to state 187
    slice                          shift and go to state 4

state 180

    (82) loop_statement -> IF ( expression ) code_block loop_else_block .

    ID              reduce using rule 82 (loop_statement -> IF ( expression ) code_block loop_else_block .)
    RETURN          reduce using rule 82 (loop_statement -> IF ( expression ) code_block loop_else_block .)
    FOR             reduce using rule 82 (loop_statement -> IF ( expression ) code_block loop_else_block .)
    WHILE           reduce using rule 82 (loop_statement -> IF ( expression ) code_block loop_else_block .)
    IF              reduce using rule 82 (loop_statement -> IF ( expression ) code_block loop_else_block .)
    PRINT           reduce using rule 82 (loop_statement -> IF ( expression ) code_block loop_else_block .)
    {               reduce using rule 82 (loop_statement -> IF ( expression ) code_block loop_else_block .)
    $end            reduce using rule 82 (loop_statement -> IF ( expression ) code_block loop_else_block .)
    }               reduce using rule 82 (loop_statement -> IF ( expression ) code_block loop_else_block .)
    ELSE            reduce using rule 82 (loop_statement -> IF ( expression ) code_block loop_else_block .)
    BREAK           reduce using rule 82 (loop_statement -> IF ( expression ) code_block loop_else_block .)
    CONTINUE        reduce using rule 82 (loop_statement -> IF ( expression ) code_block loop_else_block .)


state 181

    (78) loop_statement -> IF ( expression ) loop_statement loop_else_block .

    ID              reduce using rule 78 (loop_statement -> IF ( expression ) loop_statement loop_else_block .)
    RETURN          reduce using rule 78 (loop_statement -> IF ( expression ) loop_statement loop_else_block .)
    FOR             reduce using rule 78 (loop_statement -> IF ( expression ) loop_statement loop_else_block .)
    WHILE           reduce using rule 78 (loop_statement -> IF ( expression ) loop_statement loop_else_block .)
    IF              reduce using rule 78 (loop_statement -> IF ( expression ) loop_statement loop_else_block .)
    PRINT           reduce using rule 78 (loop_statement -> IF ( expression ) loop_statement loop_else_block .)
    {               reduce using rule 78 (loop_statement -> IF ( expression ) loop_statement loop_else_block .)
    $end            reduce using rule 78 (loop_statement -> IF ( expression ) loop_statement loop_else_block .)
    }               reduce using rule 78 (loop_statement -> IF ( expression ) loop_statement loop_else_block .)
    ELSE            reduce using rule 78 (loop_statement -> IF ( expression ) loop_statement loop_else_block .)
    BREAK           reduce using rule 78 (loop_statement -> IF ( expression ) loop_statement loop_else_block .)
    CONTINUE        reduce using rule 78 (loop_statement -> IF ( expression ) loop_statement loop_else_block .)


state 182

    (80) loop_statement -> IF ( expression ) loop_statement else_block .

    ID              reduce using rule 80 (loop_statement -> IF ( expression ) loop_statement else_block .)
    RETURN          reduce using rule 80 (loop_statement -> IF ( expression ) loop_statement else_block .)
    FOR             reduce using rule 80 (loop_statement -> IF ( expression ) loop_statement else_block .)
    WHILE           reduce using rule 80 (loop_statement -> IF ( expression ) loop_statement else_block .)
    IF              reduce using rule 80 (loop_statement -> IF ( expression ) loop_statement else_block .)
    PRINT           reduce using rule 80 (loop_statement -> IF ( expression ) loop_statement else_block .)
    {               reduce using rule 80 (loop_statement -> IF ( expression ) loop_statement else_block .)
    $end            reduce using rule 80 (loop_statement -> IF ( expression ) loop_statement else_block .)
    }               reduce using rule 80 (loop_statement -> IF ( expression ) loop_statement else_block .)
    ELSE            reduce using rule 80 (loop_statement -> IF ( expression ) loop_statement else_block .)
    BREAK           reduce using rule 80 (loop_statement -> IF ( expression ) loop_statement else_block .)
    CONTINUE        reduce using rule 80 (loop_statement -> IF ( expression ) loop_statement else_block .)


state 183

    (84) loop_else_block -> ELSE . loop_statement
    (85) loop_else_block -> ELSE . loop_block
    (74) else_block -> ELSE . statement
    (75) else_block -> ELSE . code_block
    (54) loop_statement -> . BREAK ;
    (55) loop_statement -> . CONTINUE ;
    (76) loop_statement -> . IF ( expression ) loop_statement
    (77) loop_statement -> . IF ( expression ) loop_block
    (78) loop_statement -> . IF ( expression ) loop_statement loop_else_block
    (79) loop_statement -> . IF ( expression ) statement loop_else_block
    (80) loop_statement -> . IF ( expression ) loop_statement else_block
    (81) loop_statement -> . IF ( expression ) loop_block loop_else_block
    (82) loop_statement -> . IF ( expression ) code_block loop_else_block
    (83) loop_statement -> . IF ( expression ) loop_block else_block
    (56) loop_block -> . { loop_statements_list }
    (57) loop_block -> . { loop_statement }
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    BREAK           shift and go to state 142
    CONTINUE        shift and go to state 143
    IF              shift and go to state 188
    {               shift and go to state 189
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    PRINT           shift and go to state 9

    loop_statement                 shift and go to state 186
    loop_block                     shift and go to state 187
    statement                      shift and go to state 171
    code_block                     shift and go to state 172
    slice                          shift and go to state 4

state 184

    (81) loop_statement -> IF ( expression ) loop_block loop_else_block .

    ID              reduce using rule 81 (loop_statement -> IF ( expression ) loop_block loop_else_block .)
    RETURN          reduce using rule 81 (loop_statement -> IF ( expression ) loop_block loop_else_block .)
    FOR             reduce using rule 81 (loop_statement -> IF ( expression ) loop_block loop_else_block .)
    WHILE           reduce using rule 81 (loop_statement -> IF ( expression ) loop_block loop_else_block .)
    IF              reduce using rule 81 (loop_statement -> IF ( expression ) loop_block loop_else_block .)
    PRINT           reduce using rule 81 (loop_statement -> IF ( expression ) loop_block loop_else_block .)
    {               reduce using rule 81 (loop_statement -> IF ( expression ) loop_block loop_else_block .)
    $end            reduce using rule 81 (loop_statement -> IF ( expression ) loop_block loop_else_block .)
    }               reduce using rule 81 (loop_statement -> IF ( expression ) loop_block loop_else_block .)
    ELSE            reduce using rule 81 (loop_statement -> IF ( expression ) loop_block loop_else_block .)
    BREAK           reduce using rule 81 (loop_statement -> IF ( expression ) loop_block loop_else_block .)
    CONTINUE        reduce using rule 81 (loop_statement -> IF ( expression ) loop_block loop_else_block .)


state 185

    (83) loop_statement -> IF ( expression ) loop_block else_block .

    ID              reduce using rule 83 (loop_statement -> IF ( expression ) loop_block else_block .)
    RETURN          reduce using rule 83 (loop_statement -> IF ( expression ) loop_block else_block .)
    FOR             reduce using rule 83 (loop_statement -> IF ( expression ) loop_block else_block .)
    WHILE           reduce using rule 83 (loop_statement -> IF ( expression ) loop_block else_block .)
    IF              reduce using rule 83 (loop_statement -> IF ( expression ) loop_block else_block .)
    PRINT           reduce using rule 83 (loop_statement -> IF ( expression ) loop_block else_block .)
    {               reduce using rule 83 (loop_statement -> IF ( expression ) loop_block else_block .)
    $end            reduce using rule 83 (loop_statement -> IF ( expression ) loop_block else_block .)
    }               reduce using rule 83 (loop_statement -> IF ( expression ) loop_block else_block .)
    ELSE            reduce using rule 83 (loop_statement -> IF ( expression ) loop_block else_block .)
    BREAK           reduce using rule 83 (loop_statement -> IF ( expression ) loop_block else_block .)
    CONTINUE        reduce using rule 83 (loop_statement -> IF ( expression ) loop_block else_block .)


state 186

    (84) loop_else_block -> ELSE loop_statement .

    ID              reduce using rule 84 (loop_else_block -> ELSE loop_statement .)
    RETURN          reduce using rule 84 (loop_else_block -> ELSE loop_statement .)
    FOR             reduce using rule 84 (loop_else_block -> ELSE loop_statement .)
    WHILE           reduce using rule 84 (loop_else_block -> ELSE loop_statement .)
    IF              reduce using rule 84 (loop_else_block -> ELSE loop_statement .)
    PRINT           reduce using rule 84 (loop_else_block -> ELSE loop_statement .)
    {               reduce using rule 84 (loop_else_block -> ELSE loop_statement .)
    $end            reduce using rule 84 (loop_else_block -> ELSE loop_statement .)
    }               reduce using rule 84 (loop_else_block -> ELSE loop_statement .)
    ELSE            reduce using rule 84 (loop_else_block -> ELSE loop_statement .)
    BREAK           reduce using rule 84 (loop_else_block -> ELSE loop_statement .)
    CONTINUE        reduce using rule 84 (loop_else_block -> ELSE loop_statement .)


state 187

    (85) loop_else_block -> ELSE loop_block .

    ID              reduce using rule 85 (loop_else_block -> ELSE loop_block .)
    RETURN          reduce using rule 85 (loop_else_block -> ELSE loop_block .)
    FOR             reduce using rule 85 (loop_else_block -> ELSE loop_block .)
    WHILE           reduce using rule 85 (loop_else_block -> ELSE loop_block .)
    IF              reduce using rule 85 (loop_else_block -> ELSE loop_block .)
    PRINT           reduce using rule 85 (loop_else_block -> ELSE loop_block .)
    {               reduce using rule 85 (loop_else_block -> ELSE loop_block .)
    $end            reduce using rule 85 (loop_else_block -> ELSE loop_block .)
    }               reduce using rule 85 (loop_else_block -> ELSE loop_block .)
    ELSE            reduce using rule 85 (loop_else_block -> ELSE loop_block .)
    BREAK           reduce using rule 85 (loop_else_block -> ELSE loop_block .)
    CONTINUE        reduce using rule 85 (loop_else_block -> ELSE loop_block .)


state 188

    (76) loop_statement -> IF . ( expression ) loop_statement
    (77) loop_statement -> IF . ( expression ) loop_block
    (78) loop_statement -> IF . ( expression ) loop_statement loop_else_block
    (79) loop_statement -> IF . ( expression ) statement loop_else_block
    (80) loop_statement -> IF . ( expression ) loop_statement else_block
    (81) loop_statement -> IF . ( expression ) loop_block loop_else_block
    (82) loop_statement -> IF . ( expression ) code_block loop_else_block
    (83) loop_statement -> IF . ( expression ) loop_block else_block
    (70) statement -> IF . ( expression ) statement
    (71) statement -> IF . ( expression ) code_block
    (72) statement -> IF . ( expression ) statement else_block
    (73) statement -> IF . ( expression ) code_block else_block

    (               shift and go to state 190


state 189

    (56) loop_block -> { . loop_statements_list }
    (57) loop_block -> { . loop_statement }
    (52) code_block -> { . statements_list }
    (53) code_block -> { . statement }
    (58) loop_statements_list -> . loop_statements_list statement
    (59) loop_statements_list -> . statements_list loop_statement
    (60) loop_statements_list -> . loop_statement statement
    (61) loop_statements_list -> . statement loop_statement
    (54) loop_statement -> . BREAK ;
    (55) loop_statement -> . CONTINUE ;
    (76) loop_statement -> . IF ( expression ) loop_statement
    (77) loop_statement -> . IF ( expression ) loop_block
    (78) loop_statement -> . IF ( expression ) loop_statement loop_else_block
    (79) loop_statement -> . IF ( expression ) statement loop_else_block
    (80) loop_statement -> . IF ( expression ) loop_statement else_block
    (81) loop_statement -> . IF ( expression ) loop_block loop_else_block
    (82) loop_statement -> . IF ( expression ) code_block loop_else_block
    (83) loop_statement -> . IF ( expression ) loop_block else_block
    (46) statements_list -> . statements_list statement
    (47) statements_list -> . statements_list code_block
    (48) statements_list -> . statement statement
    (49) statements_list -> . statement code_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    BREAK           shift and go to state 142
    CONTINUE        shift and go to state 143
    IF              shift and go to state 188
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    PRINT           shift and go to state 9

    loop_statements_list           shift and go to state 156
    loop_statement                 shift and go to state 157
    statements_list                shift and go to state 191
    statement                      shift and go to state 192
    slice                          shift and go to state 4

state 190

    (76) loop_statement -> IF ( . expression ) loop_statement
    (77) loop_statement -> IF ( . expression ) loop_block
    (78) loop_statement -> IF ( . expression ) loop_statement loop_else_block
    (79) loop_statement -> IF ( . expression ) statement loop_else_block
    (80) loop_statement -> IF ( . expression ) loop_statement else_block
    (81) loop_statement -> IF ( . expression ) loop_block loop_else_block
    (82) loop_statement -> IF ( . expression ) code_block loop_else_block
    (83) loop_statement -> IF ( . expression ) loop_block else_block
    (70) statement -> IF ( . expression ) statement
    (71) statement -> IF ( . expression ) code_block
    (72) statement -> IF ( . expression ) statement else_block
    (73) statement -> IF ( . expression ) code_block else_block
    (3) expression -> . ID
    (4) expression -> . number
    (5) expression -> . STRING
    (8) expression -> . [ expression ]
    (9) expression -> . [ inner_table ]
    (10) expression -> . ZEROS ( expression )
    (11) expression -> . EYE ( expression )
    (12) expression -> . ONES ( expression )
    (14) expression -> . MINUS expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression PLUS_MAT expression
    (20) expression -> . expression MINUS_MAT expression
    (21) expression -> . expression TIMES_MAT expression
    (22) expression -> . expression DIVIDE_MAT expression
    (23) expression -> . expression TRANSPOSE
    (24) expression -> . expression EQ expression
    (25) expression -> . expression NE expression
    (26) expression -> . expression GT expression
    (27) expression -> . expression GE expression
    (28) expression -> . expression LT expression
    (29) expression -> . expression LE expression
    (1) number -> . INT
    (2) number -> . FLOAT

    ID              shift and go to state 28
    STRING          shift and go to state 30
    [               shift and go to state 31
    ZEROS           shift and go to state 32
    EYE             shift and go to state 33
    ONES            shift and go to state 34
    MINUS           shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expression                     shift and go to state 193
    number                         shift and go to state 29

state 191

    (52) code_block -> { statements_list . }
    (59) loop_statements_list -> statements_list . loop_statement
    (46) statements_list -> statements_list . statement
    (47) statements_list -> statements_list . code_block
    (54) loop_statement -> . BREAK ;
    (55) loop_statement -> . CONTINUE ;
    (76) loop_statement -> . IF ( expression ) loop_statement
    (77) loop_statement -> . IF ( expression ) loop_block
    (78) loop_statement -> . IF ( expression ) loop_statement loop_else_block
    (79) loop_statement -> . IF ( expression ) statement loop_else_block
    (80) loop_statement -> . IF ( expression ) loop_statement else_block
    (81) loop_statement -> . IF ( expression ) loop_block loop_else_block
    (82) loop_statement -> . IF ( expression ) code_block loop_else_block
    (83) loop_statement -> . IF ( expression ) loop_block else_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    }               shift and go to state 86
    BREAK           shift and go to state 142
    CONTINUE        shift and go to state 143
    IF              shift and go to state 188
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    PRINT           shift and go to state 9
    {               shift and go to state 12

    loop_statement                 shift and go to state 164
    statement                      shift and go to state 10
    code_block                     shift and go to state 11
    slice                          shift and go to state 4

state 192

    (53) code_block -> { statement . }
    (61) loop_statements_list -> statement . loop_statement
    (48) statements_list -> statement . statement
    (49) statements_list -> statement . code_block
    (54) loop_statement -> . BREAK ;
    (55) loop_statement -> . CONTINUE ;
    (76) loop_statement -> . IF ( expression ) loop_statement
    (77) loop_statement -> . IF ( expression ) loop_block
    (78) loop_statement -> . IF ( expression ) loop_statement loop_else_block
    (79) loop_statement -> . IF ( expression ) statement loop_else_block
    (80) loop_statement -> . IF ( expression ) loop_statement else_block
    (81) loop_statement -> . IF ( expression ) loop_block loop_else_block
    (82) loop_statement -> . IF ( expression ) code_block loop_else_block
    (83) loop_statement -> . IF ( expression ) loop_block else_block
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    }               shift and go to state 87
    BREAK           shift and go to state 142
    CONTINUE        shift and go to state 143
    IF              shift and go to state 188
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    PRINT           shift and go to state 9
    {               shift and go to state 12

    statement                      shift and go to state 13
    loop_statement                 shift and go to state 165
    code_block                     shift and go to state 14
    slice                          shift and go to state 4

state 193

    (76) loop_statement -> IF ( expression . ) loop_statement
    (77) loop_statement -> IF ( expression . ) loop_block
    (78) loop_statement -> IF ( expression . ) loop_statement loop_else_block
    (79) loop_statement -> IF ( expression . ) statement loop_else_block
    (80) loop_statement -> IF ( expression . ) loop_statement else_block
    (81) loop_statement -> IF ( expression . ) loop_block loop_else_block
    (82) loop_statement -> IF ( expression . ) code_block loop_else_block
    (83) loop_statement -> IF ( expression . ) loop_block else_block
    (70) statement -> IF ( expression . ) statement
    (71) statement -> IF ( expression . ) code_block
    (72) statement -> IF ( expression . ) statement else_block
    (73) statement -> IF ( expression . ) code_block else_block
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . PLUS_MAT expression
    (20) expression -> expression . MINUS_MAT expression
    (21) expression -> expression . TIMES_MAT expression
    (22) expression -> expression . DIVIDE_MAT expression
    (23) expression -> expression . TRANSPOSE
    (24) expression -> expression . EQ expression
    (25) expression -> expression . NE expression
    (26) expression -> expression . GT expression
    (27) expression -> expression . GE expression
    (28) expression -> expression . LT expression
    (29) expression -> expression . LE expression

    )               shift and go to state 194
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    PLUS_MAT        shift and go to state 62
    MINUS_MAT       shift and go to state 63
    TIMES_MAT       shift and go to state 64
    DIVIDE_MAT      shift and go to state 65
    TRANSPOSE       shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70
    LT              shift and go to state 71
    LE              shift and go to state 72


state 194

    (76) loop_statement -> IF ( expression ) . loop_statement
    (77) loop_statement -> IF ( expression ) . loop_block
    (78) loop_statement -> IF ( expression ) . loop_statement loop_else_block
    (79) loop_statement -> IF ( expression ) . statement loop_else_block
    (80) loop_statement -> IF ( expression ) . loop_statement else_block
    (81) loop_statement -> IF ( expression ) . loop_block loop_else_block
    (82) loop_statement -> IF ( expression ) . code_block loop_else_block
    (83) loop_statement -> IF ( expression ) . loop_block else_block
    (70) statement -> IF ( expression ) . statement
    (71) statement -> IF ( expression ) . code_block
    (72) statement -> IF ( expression ) . statement else_block
    (73) statement -> IF ( expression ) . code_block else_block
    (54) loop_statement -> . BREAK ;
    (55) loop_statement -> . CONTINUE ;
    (76) loop_statement -> . IF ( expression ) loop_statement
    (77) loop_statement -> . IF ( expression ) loop_block
    (78) loop_statement -> . IF ( expression ) loop_statement loop_else_block
    (79) loop_statement -> . IF ( expression ) statement loop_else_block
    (80) loop_statement -> . IF ( expression ) loop_statement else_block
    (81) loop_statement -> . IF ( expression ) loop_block loop_else_block
    (82) loop_statement -> . IF ( expression ) code_block loop_else_block
    (83) loop_statement -> . IF ( expression ) loop_block else_block
    (56) loop_block -> . { loop_statements_list }
    (57) loop_block -> . { loop_statement }
    (30) statement -> . ID ASSIGN expression ;
    (31) statement -> . ID MINUS_ASSIGN expression ;
    (32) statement -> . ID PLUS_ASSIGN expression ;
    (33) statement -> . ID TIMES_ASSIGN expression ;
    (34) statement -> . ID DIVIDE_ASSIGN expression ;
    (41) statement -> . slice ASSIGN expression ;
    (42) statement -> . slice MINUS_ASSIGN expression ;
    (43) statement -> . slice PLUS_ASSIGN expression ;
    (44) statement -> . slice TIMES_ASSIGN expression ;
    (45) statement -> . slice DIVIDE_ASSIGN expression ;
    (50) statement -> . RETURN ;
    (51) statement -> . RETURN expression ;
    (62) statement -> . FOR ID ASSIGN range code_block
    (63) statement -> . FOR ID ASSIGN range loop_block
    (64) statement -> . FOR ID ASSIGN range statement
    (65) statement -> . FOR ID ASSIGN range loop_statement
    (66) statement -> . WHILE ( expression ) code_block
    (67) statement -> . WHILE ( expression ) loop_block
    (68) statement -> . WHILE ( expression ) statement
    (69) statement -> . WHILE ( expression ) loop_statement
    (70) statement -> . IF ( expression ) statement
    (71) statement -> . IF ( expression ) code_block
    (72) statement -> . IF ( expression ) statement else_block
    (73) statement -> . IF ( expression ) code_block else_block
    (86) statement -> . PRINT inner_table ;
    (87) statement -> . PRINT expression ;
    (52) code_block -> . { statements_list }
    (53) code_block -> . { statement }
    (35) slice -> . ID [ expression ]
    (36) slice -> . ID [ range ]
    (37) slice -> . ID [ expression , expression ]
    (38) slice -> . ID [ expression , range ]
    (39) slice -> . ID [ range , expression ]
    (40) slice -> . ID [ range , range ]

    BREAK           shift and go to state 142
    CONTINUE        shift and go to state 143
    IF              shift and go to state 188
    {               shift and go to state 189
    ID              shift and go to state 3
    RETURN          shift and go to state 5
    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    PRINT           shift and go to state 9

    loop_statement                 shift and go to state 176
    loop_block                     shift and go to state 177
    statement                      shift and go to state 195
    code_block                     shift and go to state 196
    slice                          shift and go to state 4

state 195

    (79) loop_statement -> IF ( expression ) statement . loop_else_block
    (70) statement -> IF ( expression ) statement .
    (72) statement -> IF ( expression ) statement . else_block
    (84) loop_else_block -> . ELSE loop_statement
    (85) loop_else_block -> . ELSE loop_block
    (74) else_block -> . ELSE statement
    (75) else_block -> . ELSE code_block

    ID              reduce using rule 70 (statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 70 (statement -> IF ( expression ) statement .)
    FOR             reduce using rule 70 (statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 70 (statement -> IF ( expression ) statement .)
    IF              reduce using rule 70 (statement -> IF ( expression ) statement .)
    PRINT           reduce using rule 70 (statement -> IF ( expression ) statement .)
    {               reduce using rule 70 (statement -> IF ( expression ) statement .)
    $end            reduce using rule 70 (statement -> IF ( expression ) statement .)
    }               reduce using rule 70 (statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 70 (statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 70 (statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 183

  ! ELSE            [ reduce using rule 70 (statement -> IF ( expression ) statement .) ]

    loop_else_block                shift and go to state 178
    else_block                     shift and go to state 161

state 196

    (82) loop_statement -> IF ( expression ) code_block . loop_else_block
    (71) statement -> IF ( expression ) code_block .
    (73) statement -> IF ( expression ) code_block . else_block
    (84) loop_else_block -> . ELSE loop_statement
    (85) loop_else_block -> . ELSE loop_block
    (74) else_block -> . ELSE statement
    (75) else_block -> . ELSE code_block

    ID              reduce using rule 71 (statement -> IF ( expression ) code_block .)
    RETURN          reduce using rule 71 (statement -> IF ( expression ) code_block .)
    FOR             reduce using rule 71 (statement -> IF ( expression ) code_block .)
    WHILE           reduce using rule 71 (statement -> IF ( expression ) code_block .)
    IF              reduce using rule 71 (statement -> IF ( expression ) code_block .)
    PRINT           reduce using rule 71 (statement -> IF ( expression ) code_block .)
    {               reduce using rule 71 (statement -> IF ( expression ) code_block .)
    $end            reduce using rule 71 (statement -> IF ( expression ) code_block .)
    }               reduce using rule 71 (statement -> IF ( expression ) code_block .)
    BREAK           reduce using rule 71 (statement -> IF ( expression ) code_block .)
    CONTINUE        reduce using rule 71 (statement -> IF ( expression ) code_block .)
    ELSE            shift and go to state 183

  ! ELSE            [ reduce using rule 71 (statement -> IF ( expression ) code_block .) ]

    loop_else_block                shift and go to state 180
    else_block                     shift and go to state 163
